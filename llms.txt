# A2A（Agent2Agent）协议高级概览

本项目定义并演示了由Google发起的开放标准**Agent2Agent（A2A）协议**，旨在实现不同AI代理系统之间的通信与互操作性。核心目标是让基于不同框架（如LangGraph、CrewAI、Google ADK、Genkit）或不同厂商构建的代理能够发现彼此能力、协商交互模式（文本、表单、文件，未来可能支持音视频）并协作完成任务。

代码库提供：

1. **正式规范**：详细JSON Schema（`specification/json/a2a.json`）定义A2A消息结构，包含请求、响应、任务状态、工件和代理元数据（Agent Cards）
2. **核心概念文档（隐含）**：主README中的链接指向代理发现、任务生命周期、工件交换、流式更新、推送通知和企业级就绪等文档
3. **示例实现**：
    * **通用库**：Python（`samples/python/common`）和JavaScript/TypeScript（`samples/js/src`）可复用代码，用于构建A2A客户端/服务端，处理JSON-RPC通信、任务管理和认证
    * **示例代理**：展示A2A集成到各代理框架：
        * **Python**：LangGraph（货币转换、流式）、CrewAI（图像生成、文件工件）、Google ADK（报销单、表单处理）
        * **JavaScript/TypeScript**：Genkit（通过API获取电影信息、生成代码文件）
    * **示例宿主应用**：使用A2A服务的应用：
        * Python和JS的CLI直接交互工具
        * 基于Python（使用Google ADK）的多代理协调器，可委派任务给其他A2A代理
4. **演示Web应用**：使用Mesop构建的Web UI（`demo/ui`），展示A2A协议支持的多代理交互，可视化对话、任务、事件和代理发现，后端服务与宿主代理协调

协议核心特性包括：通过Agent Cards进行代理发现、标准化任务管理（发送/获取/取消）、通过`Parts`和`Artifacts`支持多种内容类型、长任务流式更新、推送通知机制。项目开源并鼓励社区贡献。

# A2A（Agent2Agent）协议 

## 1. 概述

* **项目名称**：Agent2Agent（A2A）协议
* **目的**：Google提出的开放协议，实现不同框架或厂商AI代理间的通信互操作
* **核心目标**：支持代理发现能力、协商交互方式、安全协作完成任务
* **通信方式**：基于HTTP(S)的JSON-RPC 2.0，支持标准请求/响应和Server-Sent Events（SSE）流式通信
* **关键组件**：规范（JSON Schema）、通用库（Python/JS/TS）、示例代理（LangGraph/CrewAI/ADK/Genkit）、示例宿主（CLI/协调器）、Mesop演示Web应用

## 2. 协议规范（`specification/json/a2a.json`）

### 2.1 核心JSON-RPC结构

* **`JSONRPCMessage`**：请求/响应基类，包含`jsonrpc: "2.0"`和可选`id`
* **`JSONRPCRequest`**：请求对象
    * `method`：标识操作方法的字符串（如"tasks/send"）
    * `params`：方法参数对象或数组
    * `id`：唯一请求标识符（字符串/数字），通知类请求可省略
* **`JSONRPCResponse`**：响应对象
    * `result`：成功结果数据（可为null），与`error`互斥
    * `error`：错误对象，与`result`互斥
    * `id`：必须匹配对应请求id
* **`JSONRPCError`**：错误对象
    * `code`：整数错误码
    * `message`：错误描述
    * `data`：可选错误详情

### 2.2 关键A2A数据对象

* **`AgentCard`**：代理元数据，通常位于`/.well-known/agent.json`
    * `name`：可读名称
    * `description`：描述信息
    * `url`：代理A2A服务端点
    * `provider`：供应商信息
    * `version`：代理版本
    * `documentationUrl`：文档链接
    * `capabilities`：支持功能（流式/推送等）
    * `authentication`：认证方案
    * `defaultInputModes`：默认输入类型（如"text"/"file"）
    * `defaultOutputModes`：默认输出类型
    * `skills`：具体能力列表
* **`AgentCapabilities`**：
    * `streaming`：支持`tasks/sendSubscribe`
    * `pushNotifications`：支持推送通知
    * `stateTransitionHistory`：支持状态历史记录
* **`AgentSkill`**：
    * `id`：技能唯一ID
    * `name`：技能名称
    * `description`：技能描述
    * `tags`：关键词标签
    * `examples`：使用示例
    * `inputModes`：覆盖默认输入类型
    * `outputModes`：覆盖默认输出类型
* **`Task`**：代理处理的工作单元
    * `id`：任务唯一标识
    * `sessionId`：关联任务组ID
    * `status`：当前状态信息
    * `artifacts`：输出工件
    * `history`：消息历史（通过`historyLength`请求时返回）
    * `metadata`：任务元数据
* **`TaskStatus`**：
    * `state`：任务状态枚举
    * `message`：状态关联消息（进度更新/最终响应等）
    * `timestamp`：ISO 8601时间戳
* **`TaskState`（枚举）**：
    * `submitted`：已提交未启动
    * `working`：处理中
    * `input-required`：需要用户输入
    * `completed`：成功完成
    * `canceled`：已取消
    * `failed`：执行失败
    * `unknown`：未知状态
* **`Message`**：用户与代理间通信单元
    * `role`："user"或"agent"
    * `parts`：内容部件（文本/文件/数据）
    * `metadata`：消息元数据
* **`Part`（联合类型）**：
    * **`TextPart`**：
        * `type`: "text"
        * `text`: 文本内容
    * **`FilePart`**：
        * `type`: "file"
        * `file`: 文件详情（字节或URI）
    * **`DataPart`**：
        * `type`: "data"
        * `data`: 结构化JSON数据
    * `metadata`：部件元数据
* **`FileContent`**：文件数据
    * `name`：文件名
    * `mimeType`：MIME类型
    * `bytes`：Base64编码内容（与`uri`互斥）
    * `uri`：文件资源地址（与`bytes`互斥）
* **`Artifact`**：任务输出
    * `name`：工件名称
    * `description`：描述信息
    * `parts`：内容部件
    * `index`：排序索引
    * `append`：流式处理时是否追加内容
    * `lastChunk`：流式处理末位标识
    * `metadata`：工件元数据
* **`PushNotificationConfig`**：推送通知配置
    * `url`：通知接收端点
    * `token`：认证令牌
    * `authentication`：调用端点所需认证信息
* **`TaskPushNotificationConfig`**：任务与推送配置关联

### 2.3 A2A RPC方法

* **`tasks/send`**（请求/响应）：
    * 发送消息启动/继续任务
    * 参数：`TaskSendParams`
    * 结果：`Task`（同步处理后状态）
* **`tasks/sendSubscribe`**（请求/流）：
    * 发送消息并订阅SSE实时更新
    * 参数：`TaskSendParams`
    * 流事件：`TaskStatusUpdateEvent`或`TaskArtifactUpdateEvent`
* **`tasks/get`**（请求/响应）：
    * 获取任务当前状态
    * 参数：`TaskQueryParams`
    * 结果：`Task`
* **`tasks/cancel`**（请求/响应）：
    * 请求取消任务
    * 参数：`TaskIdParams`
    * 结果：更新后的`Task`
* **`tasks/pushNotification/set`**（请求/响应）：
    * 设置任务推送配置
    * 参数：`TaskPushNotificationConfig`
    * 结果：确认的配置
* **`tasks/pushNotification/get`**（请求/响应）：
    * 获取任务推送配置
    * 参数：`TaskIdParams`
    * 结果：当前配置
* **`tasks/resubscribe`**（请求/流）：
    * 断线后重新订阅任务更新
    * 参数：`TaskQueryParams`
    * 流事件：状态/工件更新事件

### 2.4 流式更新事件

* **`TaskStatusUpdateEvent`**：任务状态变更
    * `id`：任务ID
    * `status`：新状态对象
    * `final`：是否为最终事件
* **`TaskArtifactUpdateEvent`**：工件更新
    * `id`：任务ID
    * `artifact`：工件数据
    * `final`：结束标识

### 2.5 标准错误码

* `-32700`：JSON解析错误
* `-32600`：无效请求
* `-32601`：方法不存在
* `-32602`：参数错误
* `-32603`：内部错误

### 2.6 A2A专用错误码

* `-32001`：任务不存在
* `-32002`：任务不可取消
* `-32003`：不支持推送通知
* `-32004`：不支持的操作
* `-32005`：内容类型不支持

## 3. 核心概念

* **代理发现**：通过获取`/.well-known/agent.json`中的`AgentCard`发现代理能力
* **任务生命周期**：状态流转（submitted → working → [input-required] → completed/canceled/failed）
* **通信方式**：使用包含`Part`的`Message`对象，任务输出为`Artifact`
* **流式处理**：通过SSE实现长任务实时更新
* **推送通知**：通过webhook实现主动通知，支持JWT等认证方式
* **认证机制**：支持API Key/OAuth/JWT等多种方式
* **表单处理**：使用`DataPart`处理结构化数据（ADK示例演示）

## 4. 实现与示例

### 4.1 通用库

* **Python（`samples/python/common`）**：
    * 客户端：`A2AClient`和`A2ACardResolver`
    * 服务端：Starlette基础的`A2AServer`和`TaskManager`
    * 类型定义：Pydantic模型
    * 工具类：JWT签名/验证工具
* **JavaScript/TypeScript（`samples/js/src`）**：
    * 客户端：基于fetch的`A2AClient`
    * 服务端：Express基础的`A2AServer`和任务存储
    * 类型定义：接口匹配JSON Schema

### 4.2 Python示例

* **位置**：`samples/python/agents/`和`samples/python/hosts/`
* **代理示例**：
    * **LangGraph**：货币转换代理（演示工具调用、多轮对话和流式）
    * **CrewAI**：图像生成代理（处理文件工件）
    * **Google ADK**：报销代理（处理表单）
* **宿主应用**：
    * **CLI**：命令行客户端支持流式和推送
    * **多代理协调器**：基于ADK的任务委派系统

### 4.3 JavaScript/TypeScript示例

* **位置**：`samples/js/`
* **代理示例**：
    * **电影代理**：通过TMDB API查询电影信息
    * **代码生成代理**：生成代码文件（流式输出）
* **宿主应用**：Genkit框架的CLI客户端

### 4.4 演示应用（`demo/`）

* **UI**：Mesop构建的Web界面
    * 可视化多代理对话
    * 支持动态代理注册
    * 任务列表和事件日志视图
* **服务端**：
    * 管理会话、路由消息
    * 对接宿主代理

## 5. 开发与配置

* **环境要求**：Python≥3.12/3.13、Node.js≥18、uv/npm/pnpm
* **API密钥**：通过.env文件设置LLM访问密钥
* **运行示例**：启动代理服务后运行宿主客户端

## 6. 贡献指南

* 参见`CONTRIBUTING.md`
* 通过Github讨论区交流
* Github Issues提交问题
* Google Form接收私有反馈