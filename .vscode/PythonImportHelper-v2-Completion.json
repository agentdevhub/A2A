[
    {
        "label": "mesop",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mesop",
        "description": "mesop",
        "detail": "mesop",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "StateMessage",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "SettingsState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "StateMessage",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "StateConversation",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "StateMessage",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "SessionTask",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "StateTask",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "ContentPart",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "SettingsState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "importPath": "state.state",
        "description": "state.state",
        "isExtraImport": true,
        "detail": "state.state",
        "documentation": {}
    },
    {
        "label": "AgentState",
        "importPath": "state.agent_state",
        "description": "state.agent_state",
        "isExtraImport": true,
        "detail": "state.agent_state",
        "documentation": {}
    },
    {
        "label": "AgentState",
        "importPath": "state.agent_state",
        "description": "state.agent_state",
        "isExtraImport": true,
        "detail": "state.agent_state",
        "documentation": {}
    },
    {
        "label": "AgentState",
        "importPath": "state.agent_state",
        "description": "state.agent_state",
        "isExtraImport": true,
        "detail": "state.agent_state",
        "documentation": {}
    },
    {
        "label": "AgentState",
        "importPath": "state.agent_state",
        "description": "state.agent_state",
        "isExtraImport": true,
        "detail": "state.agent_state",
        "documentation": {}
    },
    {
        "label": "AgentCard",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TextPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "DataPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TextPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TextPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskState",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatus",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatusUpdateEvent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskArtifactUpdateEvent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Artifact",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentCard",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "DataPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "FilePart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "FileContent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Part",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentCard",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TextPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskState",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatus",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Artifact",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentCard",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "DataPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatus",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Artifact",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCMessage",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentCard",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Artifact",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Part",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentCard",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Artifact",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "FileContent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "FilePart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskSendParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskState",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatus",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TextPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskSendParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatus",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Artifact",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatusUpdateEvent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskArtifactUpdateEvent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TextPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskState",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "InternalError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskSendParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatus",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Artifact",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TextPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskState",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "InternalError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskArtifactUpdateEvent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatusUpdateEvent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskIdParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "PushNotificationConfig",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SetTaskPushNotificationRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SetTaskPushNotificationResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskPushNotificationConfig",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskNotFoundError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "InvalidParamsError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentCard",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "A2AClientJSONError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentCard",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "CancelTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "CancelTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SetTaskPushNotificationRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SetTaskPushNotificationResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskPushNotificationRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskPushNotificationResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "A2AClientHTTPError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "A2AClientJSONError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "A2ARequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "InvalidRequestError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONParseError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "CancelTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SetTaskPushNotificationRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskPushNotificationRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "InternalError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentCard",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskResubscriptionRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskIdParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskQueryParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskNotFoundError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "CancelTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskNotCancelableError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SetTaskPushNotificationRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskPushNotificationRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "CancelTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SetTaskPushNotificationResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskPushNotificationResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "PushNotificationNotSupportedError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskSendParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatus",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskState",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskResubscriptionRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Artifact",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "PushNotificationConfig",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatusUpdateEvent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskPushNotificationConfig",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "InternalError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "ContentTypeNotSupportedError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "UnsupportedOperationError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentCard",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskState",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskSendParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TextPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "DataPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Part",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatusUpdateEvent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentCard",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskSendParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatusUpdateEvent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskArtifactUpdateEvent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatus",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskState",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatus",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskState",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskSendParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskQueryParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskIdParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Artifact",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "PushNotificationConfig",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatusUpdateEvent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskNotFoundError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskNotCancelableError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "PushNotificationNotSupportedError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "UnsupportedOperationError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "CancelTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SetTaskPushNotificationResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskPushNotificationResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "CancelTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SetTaskPushNotificationRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskPushNotificationRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskResubscriptionRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TextPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskPushNotificationConfig",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskState",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TextPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "FileContent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "FilePart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "DataPart",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatus",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Artifact",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatusUpdateEvent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskArtifactUpdateEvent",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AuthenticationInfo",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "PushNotificationConfig",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskIdParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskQueryParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskSendParams",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskPushNotificationConfig",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "CancelTaskRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "CancelTaskResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SetTaskPushNotificationRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "SetTaskPushNotificationResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskPushNotificationRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskPushNotificationResponse",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskResubscriptionRequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "A2ARequest",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "# A2ARequest is a TypeAdapter\r\n    JSONParseError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "InvalidRequestError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "MethodNotFoundError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "InvalidParamsError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "InternalError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskNotFoundError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "TaskNotCancelableError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "PushNotificationNotSupportedError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "UnsupportedOperationError",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentProvider",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentCapabilities",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentAuthentication",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentSkill",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "AgentCard",
        "importPath": "common.types",
        "description": "common.types",
        "isExtraImport": true,
        "detail": "common.types",
        "documentation": {}
    },
    {
        "label": "dataclasses",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dataclasses",
        "description": "dataclasses",
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "mesop.labs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mesop.labs",
        "description": "mesop.labs",
        "detail": "mesop.labs",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "SendMessage",
        "importPath": "state.host_agent_service",
        "description": "state.host_agent_service",
        "isExtraImport": true,
        "detail": "state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "ListConversations",
        "importPath": "state.host_agent_service",
        "description": "state.host_agent_service",
        "isExtraImport": true,
        "detail": "state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "convert_message_to_state",
        "importPath": "state.host_agent_service",
        "description": "state.host_agent_service",
        "isExtraImport": true,
        "detail": "state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "CreateConversation",
        "importPath": "state.host_agent_service",
        "description": "state.host_agent_service",
        "isExtraImport": true,
        "detail": "state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "GetEvents",
        "importPath": "state.host_agent_service",
        "description": "state.host_agent_service",
        "isExtraImport": true,
        "detail": "state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "convert_event_to_state",
        "importPath": "state.host_agent_service",
        "description": "state.host_agent_service",
        "isExtraImport": true,
        "detail": "state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "SendMessage",
        "importPath": "state.host_agent_service",
        "description": "state.host_agent_service",
        "isExtraImport": true,
        "detail": "state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "UpdateAppState",
        "importPath": "state.host_agent_service",
        "description": "state.host_agent_service",
        "isExtraImport": true,
        "detail": "state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "UpdateAppState",
        "importPath": "state.host_agent_service",
        "description": "state.host_agent_service",
        "isExtraImport": true,
        "detail": "state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "ListRemoteAgents",
        "importPath": "state.host_agent_service",
        "description": "state.host_agent_service",
        "isExtraImport": true,
        "detail": "state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "AddRemoteAgent",
        "importPath": "state.host_agent_service",
        "description": "state.host_agent_service",
        "isExtraImport": true,
        "detail": "state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "google.genai.types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.genai.types",
        "description": "google.genai.types",
        "detail": "google.genai.types",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "MAIN_COLUMN_STYLE",
        "importPath": "styles.styles",
        "description": "styles.styles",
        "isExtraImport": true,
        "detail": "styles.styles",
        "documentation": {}
    },
    {
        "label": "PAGE_BACKGROUND_PADDING_STYLE",
        "importPath": "styles.styles",
        "description": "styles.styles",
        "isExtraImport": true,
        "detail": "styles.styles",
        "documentation": {}
    },
    {
        "label": "PAGE_BACKGROUND_STYLE",
        "importPath": "styles.styles",
        "description": "styles.styles",
        "isExtraImport": true,
        "detail": "styles.styles",
        "documentation": {}
    },
    {
        "label": "SIDENAV_MAX_WIDTH",
        "importPath": "styles.styles",
        "description": "styles.styles",
        "isExtraImport": true,
        "detail": "styles.styles",
        "documentation": {}
    },
    {
        "label": "SIDENAV_MIN_WIDTH",
        "importPath": "styles.styles",
        "description": "styles.styles",
        "isExtraImport": true,
        "detail": "styles.styles",
        "documentation": {}
    },
    {
        "label": "SIDENAV_MAX_WIDTH",
        "importPath": "styles.styles",
        "description": "styles.styles",
        "isExtraImport": true,
        "detail": "styles.styles",
        "documentation": {}
    },
    {
        "label": "SIDENAV_MIN_WIDTH",
        "importPath": "styles.styles",
        "description": "styles.styles",
        "isExtraImport": true,
        "detail": "styles.styles",
        "documentation": {}
    },
    {
        "label": "_FANCY_TEXT_GRADIENT",
        "importPath": "styles.styles",
        "description": "styles.styles",
        "isExtraImport": true,
        "detail": "styles.styles",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MENU_STYLE",
        "importPath": "styles.styles",
        "description": "styles.styles",
        "isExtraImport": true,
        "detail": "styles.styles",
        "documentation": {}
    },
    {
        "label": "stat",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stat",
        "description": "stat",
        "detail": "stat",
        "documentation": {}
    },
    {
        "label": "agents_list",
        "importPath": "components.agent_list",
        "description": "components.agent_list",
        "isExtraImport": true,
        "detail": "components.agent_list",
        "documentation": {}
    },
    {
        "label": "dialog",
        "importPath": "components.dialog",
        "description": "components.dialog",
        "isExtraImport": true,
        "detail": "components.dialog",
        "documentation": {}
    },
    {
        "label": "dialog_actions",
        "importPath": "components.dialog",
        "description": "components.dialog",
        "isExtraImport": true,
        "detail": "components.dialog",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "components.header",
        "description": "components.header",
        "isExtraImport": true,
        "detail": "components.header",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "components.header",
        "description": "components.header",
        "isExtraImport": true,
        "detail": "components.header",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "components.header",
        "description": "components.header",
        "isExtraImport": true,
        "detail": "components.header",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "components.header",
        "description": "components.header",
        "isExtraImport": true,
        "detail": "components.header",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "components.header",
        "description": "components.header",
        "isExtraImport": true,
        "detail": "components.header",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "components.header",
        "description": "components.header",
        "isExtraImport": true,
        "detail": "components.header",
        "documentation": {}
    },
    {
        "label": "page_frame",
        "importPath": "components.page_scaffold",
        "description": "components.page_scaffold",
        "isExtraImport": true,
        "detail": "components.page_scaffold",
        "documentation": {}
    },
    {
        "label": "page_scaffold",
        "importPath": "components.page_scaffold",
        "description": "components.page_scaffold",
        "isExtraImport": true,
        "detail": "components.page_scaffold",
        "documentation": {}
    },
    {
        "label": "page_scaffold",
        "importPath": "components.page_scaffold",
        "description": "components.page_scaffold",
        "isExtraImport": true,
        "detail": "components.page_scaffold",
        "documentation": {}
    },
    {
        "label": "page_frame",
        "importPath": "components.page_scaffold",
        "description": "components.page_scaffold",
        "isExtraImport": true,
        "detail": "components.page_scaffold",
        "documentation": {}
    },
    {
        "label": "page_scaffold",
        "importPath": "components.page_scaffold",
        "description": "components.page_scaffold",
        "isExtraImport": true,
        "detail": "components.page_scaffold",
        "documentation": {}
    },
    {
        "label": "page_frame",
        "importPath": "components.page_scaffold",
        "description": "components.page_scaffold",
        "isExtraImport": true,
        "detail": "components.page_scaffold",
        "documentation": {}
    },
    {
        "label": "page_scaffold",
        "importPath": "components.page_scaffold",
        "description": "components.page_scaffold",
        "isExtraImport": true,
        "detail": "components.page_scaffold",
        "documentation": {}
    },
    {
        "label": "page_frame",
        "importPath": "components.page_scaffold",
        "description": "components.page_scaffold",
        "isExtraImport": true,
        "detail": "components.page_scaffold",
        "documentation": {}
    },
    {
        "label": "page_scaffold",
        "importPath": "components.page_scaffold",
        "description": "components.page_scaffold",
        "isExtraImport": true,
        "detail": "components.page_scaffold",
        "documentation": {}
    },
    {
        "label": "page_frame",
        "importPath": "components.page_scaffold",
        "description": "components.page_scaffold",
        "isExtraImport": true,
        "detail": "components.page_scaffold",
        "documentation": {}
    },
    {
        "label": "page_scaffold",
        "importPath": "components.page_scaffold",
        "description": "components.page_scaffold",
        "isExtraImport": true,
        "detail": "components.page_scaffold",
        "documentation": {}
    },
    {
        "label": "get_agent_card",
        "importPath": "utils.agent_card",
        "description": "utils.agent_card",
        "isExtraImport": true,
        "detail": "utils.agent_card",
        "documentation": {}
    },
    {
        "label": "get_agent_card",
        "importPath": "utils.agent_card",
        "description": "utils.agent_card",
        "isExtraImport": true,
        "detail": "utils.agent_card",
        "documentation": {}
    },
    {
        "label": "get_agent_card",
        "importPath": "utils.agent_card",
        "description": "utils.agent_card",
        "isExtraImport": true,
        "detail": "utils.agent_card",
        "documentation": {}
    },
    {
        "label": "conversation",
        "importPath": "components.conversation",
        "description": "components.conversation",
        "isExtraImport": true,
        "detail": "components.conversation",
        "documentation": {}
    },
    {
        "label": "event_list",
        "importPath": "components.event_viewer",
        "description": "components.event_viewer",
        "isExtraImport": true,
        "detail": "components.event_viewer",
        "documentation": {}
    },
    {
        "label": "conversation_list",
        "importPath": "components.conversation_list",
        "description": "components.conversation_list",
        "isExtraImport": true,
        "detail": "components.conversation_list",
        "documentation": {}
    },
    {
        "label": "task_card",
        "importPath": "components.task_card",
        "description": "components.task_card",
        "isExtraImport": true,
        "detail": "components.task_card",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "connect_sse",
        "importPath": "httpx_sse",
        "description": "httpx_sse",
        "isExtraImport": true,
        "detail": "httpx_sse",
        "documentation": {}
    },
    {
        "label": "connect_sse",
        "importPath": "httpx_sse",
        "description": "httpx_sse",
        "isExtraImport": true,
        "detail": "httpx_sse",
        "documentation": {}
    },
    {
        "label": "CreateConversationRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "CreateConversationResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListConversationRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListConversationResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "SendMessageRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "SendMessageResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListMessageRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListMessageResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "GetEventRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "GetEventResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "PendingMessageRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "PendingMessageResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListTaskRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListTaskResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "RegisterAgentRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "RegisterAgentResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "AgentClientHTTPError",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListAgentRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListAgentResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "AgentClientJSONError",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "CreateConversationResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListConversationResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "SendMessageResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "MessageInfo",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListMessageResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "PendingMessageResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListTaskResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "RegisterAgentResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListAgentResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "GetEventResponse",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "CreateConversationRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListConversationRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "SendMessageRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListMessageRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "PendingMessageRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListTaskRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "RegisterAgentRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "ListAgentRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "GetEventRequest",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "service.types",
        "description": "service.types",
        "isExtraImport": true,
        "detail": "service.types",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "HostAgent",
        "importPath": "hosts.multiagent.host_agent",
        "description": "hosts.multiagent.host_agent",
        "isExtraImport": true,
        "detail": "hosts.multiagent.host_agent",
        "documentation": {}
    },
    {
        "label": "TaskCallbackArg",
        "importPath": "hosts.multiagent.remote_agent_connection",
        "description": "hosts.multiagent.remote_agent_connection",
        "isExtraImport": true,
        "detail": "hosts.multiagent.remote_agent_connection",
        "documentation": {}
    },
    {
        "label": "ApplicationManager",
        "importPath": "service.server.application_manager",
        "description": "service.server.application_manager",
        "isExtraImport": true,
        "detail": "service.server.application_manager",
        "documentation": {}
    },
    {
        "label": "ApplicationManager",
        "importPath": "service.server.application_manager",
        "description": "service.server.application_manager",
        "isExtraImport": true,
        "detail": "service.server.application_manager",
        "documentation": {}
    },
    {
        "label": "Runner",
        "importPath": "google.adk",
        "description": "google.adk",
        "isExtraImport": true,
        "detail": "google.adk",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "google.adk",
        "description": "google.adk",
        "isExtraImport": true,
        "detail": "google.adk",
        "documentation": {}
    },
    {
        "label": "InMemorySessionService",
        "importPath": "google.adk.sessions.in_memory_session_service",
        "description": "google.adk.sessions.in_memory_session_service",
        "isExtraImport": true,
        "detail": "google.adk.sessions.in_memory_session_service",
        "documentation": {}
    },
    {
        "label": "InMemoryMemoryService",
        "importPath": "google.adk.memory.in_memory_memory_service",
        "description": "google.adk.memory.in_memory_memory_service",
        "isExtraImport": true,
        "detail": "google.adk.memory.in_memory_memory_service",
        "documentation": {}
    },
    {
        "label": "InMemoryMemoryService",
        "importPath": "google.adk.memory.in_memory_memory_service",
        "description": "google.adk.memory.in_memory_memory_service",
        "isExtraImport": true,
        "detail": "google.adk.memory.in_memory_memory_service",
        "documentation": {}
    },
    {
        "label": "InMemoryArtifactService",
        "importPath": "google.adk.artifacts",
        "description": "google.adk.artifacts",
        "isExtraImport": true,
        "detail": "google.adk.artifacts",
        "documentation": {}
    },
    {
        "label": "InMemoryArtifactService",
        "importPath": "google.adk.artifacts",
        "description": "google.adk.artifacts",
        "isExtraImport": true,
        "detail": "google.adk.artifacts",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "google.adk.events.event",
        "description": "google.adk.events.event",
        "isExtraImport": true,
        "detail": "google.adk.events.event",
        "documentation": {}
    },
    {
        "label": "EventActions",
        "importPath": "google.adk.events.event_actions",
        "description": "google.adk.events.event_actions",
        "isExtraImport": true,
        "detail": "google.adk.events.event_actions",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "google.genai",
        "description": "google.genai",
        "isExtraImport": true,
        "detail": "google.genai",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "google.genai",
        "description": "google.genai",
        "isExtraImport": true,
        "detail": "google.genai",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "google.genai",
        "description": "google.genai",
        "isExtraImport": true,
        "detail": "google.genai",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "google.genai",
        "description": "google.genai",
        "isExtraImport": true,
        "detail": "google.genai",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "TypeAdapter",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_serializer",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "TypeAdapter",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_serializer",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "ConversationClient",
        "importPath": "service.client.client",
        "description": "service.client.client",
        "isExtraImport": true,
        "detail": "service.client.client",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "pydantic.dataclasses",
        "description": "pydantic.dataclasses",
        "isExtraImport": true,
        "detail": "pydantic.dataclasses",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "home_page_content",
        "importPath": "pages.home",
        "description": "pages.home",
        "isExtraImport": true,
        "detail": "pages.home",
        "documentation": {}
    },
    {
        "label": "agent_list_page",
        "importPath": "pages.agent_list",
        "description": "pages.agent_list",
        "isExtraImport": true,
        "detail": "pages.agent_list",
        "documentation": {}
    },
    {
        "label": "conversation_page",
        "importPath": "pages.conversation",
        "description": "pages.conversation",
        "isExtraImport": true,
        "detail": "pages.conversation",
        "documentation": {}
    },
    {
        "label": "event_list_page",
        "importPath": "pages.event_list",
        "description": "pages.event_list",
        "isExtraImport": true,
        "detail": "pages.event_list",
        "documentation": {}
    },
    {
        "label": "settings_page_content",
        "importPath": "pages.settings",
        "description": "pages.settings",
        "isExtraImport": true,
        "detail": "pages.settings",
        "documentation": {}
    },
    {
        "label": "task_list_page",
        "importPath": "pages.task_list",
        "description": "pages.task_list",
        "isExtraImport": true,
        "detail": "pages.task_list",
        "documentation": {}
    },
    {
        "label": "host_agent_service",
        "importPath": "state",
        "description": "state",
        "isExtraImport": true,
        "detail": "state",
        "documentation": {}
    },
    {
        "label": "ConversationServer",
        "importPath": "service.server.server",
        "description": "service.server.server",
        "isExtraImport": true,
        "detail": "service.server.server",
        "documentation": {}
    },
    {
        "label": "WSGIMiddleware",
        "importPath": "fastapi.middleware.wsgi",
        "description": "fastapi.middleware.wsgi",
        "isExtraImport": true,
        "detail": "fastapi.middleware.wsgi",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "InMemoryCache",
        "importPath": "common.utils.in_memory_cache",
        "description": "common.utils.in_memory_cache",
        "isExtraImport": true,
        "detail": "common.utils.in_memory_cache",
        "documentation": {}
    },
    {
        "label": "InMemoryCache",
        "importPath": "common.utils.in_memory_cache",
        "description": "common.utils.in_memory_cache",
        "isExtraImport": true,
        "detail": "common.utils.in_memory_cache",
        "documentation": {}
    },
    {
        "label": "InMemoryCache",
        "importPath": "common.utils.in_memory_cache",
        "description": "common.utils.in_memory_cache",
        "isExtraImport": true,
        "detail": "common.utils.in_memory_cache",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "crewai",
        "description": "crewai",
        "isExtraImport": true,
        "detail": "crewai",
        "documentation": {}
    },
    {
        "label": "Crew",
        "importPath": "crewai",
        "description": "crewai",
        "isExtraImport": true,
        "detail": "crewai",
        "documentation": {}
    },
    {
        "label": "LLM",
        "importPath": "crewai",
        "description": "crewai",
        "isExtraImport": true,
        "detail": "crewai",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "crewai",
        "description": "crewai",
        "isExtraImport": true,
        "detail": "crewai",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "crewai.process",
        "description": "crewai.process",
        "isExtraImport": true,
        "detail": "crewai.process",
        "documentation": {}
    },
    {
        "label": "tool",
        "importPath": "crewai.tools",
        "description": "crewai.tools",
        "isExtraImport": true,
        "detail": "crewai.tools",
        "documentation": {}
    },
    {
        "label": "genai",
        "importPath": "google",
        "description": "google",
        "isExtraImport": true,
        "detail": "google",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageGenerationAgent",
        "importPath": "agent",
        "description": "agent",
        "isExtraImport": true,
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "ReimbursementAgent",
        "importPath": "agent",
        "description": "agent",
        "isExtraImport": true,
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "InMemoryTaskManager",
        "importPath": "common.server.task_manager",
        "description": "common.server.task_manager",
        "isExtraImport": true,
        "detail": "common.server.task_manager",
        "documentation": {}
    },
    {
        "label": "InMemoryTaskManager",
        "importPath": "common.server.task_manager",
        "description": "common.server.task_manager",
        "isExtraImport": true,
        "detail": "common.server.task_manager",
        "documentation": {}
    },
    {
        "label": "InMemoryTaskManager",
        "importPath": "common.server.task_manager",
        "description": "common.server.task_manager",
        "isExtraImport": true,
        "detail": "common.server.task_manager",
        "documentation": {}
    },
    {
        "label": "TaskManager",
        "importPath": "common.server.task_manager",
        "description": "common.server.task_manager",
        "isExtraImport": true,
        "detail": "common.server.task_manager",
        "documentation": {}
    },
    {
        "label": "InMemoryTaskManager",
        "importPath": "common.server.task_manager",
        "description": "common.server.task_manager",
        "isExtraImport": true,
        "detail": "common.server.task_manager",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "common.server",
        "description": "common.server",
        "isExtraImport": true,
        "detail": "common.server",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "LlmAgent",
        "importPath": "google.adk.agents.llm_agent",
        "description": "google.adk.agents.llm_agent",
        "isExtraImport": true,
        "detail": "google.adk.agents.llm_agent",
        "documentation": {}
    },
    {
        "label": "ToolContext",
        "importPath": "google.adk.tools.tool_context",
        "description": "google.adk.tools.tool_context",
        "isExtraImport": true,
        "detail": "google.adk.tools.tool_context",
        "documentation": {}
    },
    {
        "label": "ToolContext",
        "importPath": "google.adk.tools.tool_context",
        "description": "google.adk.tools.tool_context",
        "isExtraImport": true,
        "detail": "google.adk.tools.tool_context",
        "documentation": {}
    },
    {
        "label": "Runner",
        "importPath": "google.adk.runners",
        "description": "google.adk.runners",
        "isExtraImport": true,
        "detail": "google.adk.runners",
        "documentation": {}
    },
    {
        "label": "InMemorySessionService",
        "importPath": "google.adk.sessions",
        "description": "google.adk.sessions",
        "isExtraImport": true,
        "detail": "google.adk.sessions",
        "documentation": {}
    },
    {
        "label": "common.server.utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "common.server.utils",
        "description": "common.server.utils",
        "detail": "common.server.utils",
        "documentation": {}
    },
    {
        "label": "new_not_implemented_error",
        "importPath": "common.server.utils",
        "description": "common.server.utils",
        "isExtraImport": true,
        "detail": "common.server.utils",
        "documentation": {}
    },
    {
        "label": "ChatGoogleGenerativeAI",
        "importPath": "langchain_google_genai",
        "description": "langchain_google_genai",
        "isExtraImport": true,
        "detail": "langchain_google_genai",
        "documentation": {}
    },
    {
        "label": "tool",
        "importPath": "langchain_core.tools",
        "description": "langchain_core.tools",
        "isExtraImport": true,
        "detail": "langchain_core.tools",
        "documentation": {}
    },
    {
        "label": "create_react_agent",
        "importPath": "langgraph.prebuilt",
        "description": "langgraph.prebuilt",
        "isExtraImport": true,
        "detail": "langgraph.prebuilt",
        "documentation": {}
    },
    {
        "label": "MemorySaver",
        "importPath": "langgraph.checkpoint.memory",
        "description": "langgraph.checkpoint.memory",
        "isExtraImport": true,
        "detail": "langgraph.checkpoint.memory",
        "documentation": {}
    },
    {
        "label": "AIMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "ToolMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "CurrencyAgent",
        "importPath": "agents.langgraph.agent",
        "description": "agents.langgraph.agent",
        "isExtraImport": true,
        "detail": "agents.langgraph.agent",
        "documentation": {}
    },
    {
        "label": "PushNotificationSenderAuth",
        "importPath": "common.utils.push_notification_auth",
        "description": "common.utils.push_notification_auth",
        "isExtraImport": true,
        "detail": "common.utils.push_notification_auth",
        "documentation": {}
    },
    {
        "label": "PushNotificationReceiverAuth",
        "importPath": "common.utils.push_notification_auth",
        "description": "common.utils.push_notification_auth",
        "isExtraImport": true,
        "detail": "common.utils.push_notification_auth",
        "documentation": {}
    },
    {
        "label": "Starlette",
        "importPath": "starlette.applications",
        "description": "starlette.applications",
        "isExtraImport": true,
        "detail": "starlette.applications",
        "documentation": {}
    },
    {
        "label": "Starlette",
        "importPath": "starlette.applications",
        "description": "starlette.applications",
        "isExtraImport": true,
        "detail": "starlette.applications",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "EventSourceResponse",
        "importPath": "sse_starlette.sse",
        "description": "sse_starlette.sse",
        "isExtraImport": true,
        "detail": "sse_starlette.sse",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "starlette.requests",
        "description": "starlette.requests",
        "isExtraImport": true,
        "detail": "starlette.requests",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "starlette.requests",
        "description": "starlette.requests",
        "isExtraImport": true,
        "detail": "starlette.requests",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "starlette.requests",
        "description": "starlette.requests",
        "isExtraImport": true,
        "detail": "starlette.requests",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "jwk",
        "importPath": "jwcrypto",
        "description": "jwcrypto",
        "isExtraImport": true,
        "detail": "jwcrypto",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "PyJWK",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "PyJWKClient",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "InvocationContext",
        "importPath": "google.adk.agents.invocation_context",
        "description": "google.adk.agents.invocation_context",
        "isExtraImport": true,
        "detail": "google.adk.agents.invocation_context",
        "documentation": {}
    },
    {
        "label": "ReadonlyContext",
        "importPath": "google.adk.agents.readonly_context",
        "description": "google.adk.agents.readonly_context",
        "isExtraImport": true,
        "detail": "google.adk.agents.readonly_context",
        "documentation": {}
    },
    {
        "label": "CallbackContext",
        "importPath": "google.adk.agents.callback_context",
        "description": "google.adk.agents.callback_context",
        "isExtraImport": true,
        "detail": "google.adk.agents.callback_context",
        "documentation": {}
    },
    {
        "label": "A2ACardResolver",
        "importPath": "common.client",
        "description": "common.client",
        "isExtraImport": true,
        "detail": "common.client",
        "documentation": {}
    },
    {
        "label": "A2AClient",
        "importPath": "common.client",
        "description": "common.client",
        "isExtraImport": true,
        "detail": "common.client",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "ANY",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "validate",
        "importPath": "jsonschema",
        "description": "jsonschema",
        "isExtraImport": true,
        "detail": "jsonschema",
        "documentation": {}
    },
    {
        "label": "Draft7Validator",
        "importPath": "jsonschema",
        "description": "jsonschema",
        "isExtraImport": true,
        "detail": "jsonschema",
        "documentation": {}
    },
    {
        "label": "RefResolver",
        "importPath": "jsonschema",
        "description": "jsonschema",
        "isExtraImport": true,
        "detail": "jsonschema",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "jsonschema",
        "description": "jsonschema",
        "isExtraImport": true,
        "detail": "jsonschema",
        "documentation": {}
    },
    {
        "label": "ImageGenerationAgent",
        "importPath": "agents.crewai.agent",
        "description": "agents.crewai.agent",
        "isExtraImport": true,
        "detail": "agents.crewai.agent",
        "documentation": {}
    },
    {
        "label": "Imagedata",
        "importPath": "agents.crewai.agent",
        "description": "agents.crewai.agent",
        "isExtraImport": true,
        "detail": "agents.crewai.agent",
        "documentation": {}
    },
    {
        "label": "generate_image_tool",
        "importPath": "agents.crewai.agent",
        "description": "agents.crewai.agent",
        "isExtraImport": true,
        "detail": "agents.crewai.agent",
        "documentation": {}
    },
    {
        "label": "get_api_key",
        "importPath": "agents.crewai.agent",
        "description": "agents.crewai.agent",
        "isExtraImport": true,
        "detail": "agents.crewai.agent",
        "documentation": {}
    },
    {
        "label": "agents_list",
        "kind": 2,
        "importPath": "demo.ui.components.agent_list",
        "description": "demo.ui.components.agent_list",
        "peekOfCode": "def agents_list(\n    agents: list[AgentCard],\n):\n  \"\"\"Agents list component\"\"\"\n  df_data = {\n      \"Address\": [],\n      \"Name\": [],\n      \"Description\": [],\n      \"Organization\": [],\n      \"Input Modes\": [],",
        "detail": "demo.ui.components.agent_list",
        "documentation": {}
    },
    {
        "label": "add_agent",
        "kind": 2,
        "importPath": "demo.ui.components.agent_list",
        "description": "demo.ui.components.agent_list",
        "peekOfCode": "def add_agent(e: me.ClickEvent):  # pylint: disable=unused-argument\n    \"\"\"import agent button handler\"\"\"\n    state = me.state(AgentState)\n    state.agent_dialog_open = True",
        "detail": "demo.ui.components.agent_list",
        "documentation": {}
    },
    {
        "label": "AsyncAction",
        "kind": 6,
        "importPath": "demo.ui.components.async_poller",
        "description": "demo.ui.components.async_poller",
        "peekOfCode": "class AsyncAction:\n  value: AppState\n  duration_seconds: int\n@mel.web_component(path=\"./async_poller.js\")\ndef async_poller(\n    *,\n    trigger_event: Callable[[mel.WebEvent], Any],\n    action: AsyncAction | None = None,\n    key: str | None = None,\n):",
        "detail": "demo.ui.components.async_poller",
        "documentation": {}
    },
    {
        "label": "async_poller",
        "kind": 2,
        "importPath": "demo.ui.components.async_poller",
        "description": "demo.ui.components.async_poller",
        "peekOfCode": "def async_poller(\n    *,\n    trigger_event: Callable[[mel.WebEvent], Any],\n    action: AsyncAction | None = None,\n    key: str | None = None,\n):\n  \"\"\"Creates an invisibe component that will delay state changes asynchronously.\n  Right now this implementation is limited since we basically just pass the key\n  around. But ideally we also pass in some kind of value to update when the time\n  out expires.",
        "detail": "demo.ui.components.async_poller",
        "documentation": {}
    },
    {
        "label": "chat_bubble",
        "kind": 2,
        "importPath": "demo.ui.components.chat_bubble",
        "description": "demo.ui.components.chat_bubble",
        "peekOfCode": "def chat_bubble(message: StateMessage, key: str):\n    \"\"\"Chat bubble component\"\"\"\n    app_state = me.state(AppState)\n    show_progress_bar = (\n        message.message_id in app_state.background_tasks\n        or message.message_id in app_state.message_aliases.values()\n    )\n    progress_text = \"\"\n    if show_progress_bar:\n      progress_text = app_state.background_tasks[message.message_id]",
        "detail": "demo.ui.components.chat_bubble",
        "documentation": {}
    },
    {
        "label": "chat_box",
        "kind": 2,
        "importPath": "demo.ui.components.chat_bubble",
        "description": "demo.ui.components.chat_bubble",
        "peekOfCode": "def chat_box(\n    content: str,\n    media_type: str,\n    role: str,\n    key: str,\n    progress_bar: bool,\n    progress_text: str\n):\n    with me.box(\n        style=me.Style(",
        "detail": "demo.ui.components.chat_bubble",
        "documentation": {}
    },
    {
        "label": "PageState",
        "kind": 6,
        "importPath": "demo.ui.components.conversation",
        "description": "demo.ui.components.conversation",
        "peekOfCode": "class PageState:\n    \"\"\"Local Page State\"\"\"\n    conversation_id: str = \"\"\n    message_content: str = \"\"\ndef on_blur(e: me.InputBlurEvent):\n    \"\"\"input handler\"\"\"\n    state = me.state(PageState)\n    state.message_content = e.value\nasync def send_message(message: str, message_id: str = \"\"):\n  state = me.state(PageState)",
        "detail": "demo.ui.components.conversation",
        "documentation": {}
    },
    {
        "label": "on_blur",
        "kind": 2,
        "importPath": "demo.ui.components.conversation",
        "description": "demo.ui.components.conversation",
        "peekOfCode": "def on_blur(e: me.InputBlurEvent):\n    \"\"\"input handler\"\"\"\n    state = me.state(PageState)\n    state.message_content = e.value\nasync def send_message(message: str, message_id: str = \"\"):\n  state = me.state(PageState)\n  app_state = me.state(AppState)\n  settings_state = me.state(SettingsState)\n  c = next(\n      (",
        "detail": "demo.ui.components.conversation",
        "documentation": {}
    },
    {
        "label": "conversation",
        "kind": 2,
        "importPath": "demo.ui.components.conversation",
        "description": "demo.ui.components.conversation",
        "peekOfCode": "def conversation():\n    \"\"\"Conversation component\"\"\"\n    page_state = me.state(PageState)\n    app_state = me.state(AppState)\n    if \"conversation_id\" in me.query_params:\n      page_state.conversation_id = me.query_params[\"conversation_id\"]\n      app_state.current_conversation_id = page_state.conversation_id\n    with me.box(\n        style=me.Style(\n            display=\"flex\",",
        "detail": "demo.ui.components.conversation",
        "documentation": {}
    },
    {
        "label": "conversation_list",
        "kind": 2,
        "importPath": "demo.ui.components.conversation_list",
        "description": "demo.ui.components.conversation_list",
        "peekOfCode": "def conversation_list(conversations: List[StateConversation]):\n    \"\"\"Conversation list component\"\"\"\n    df_data = {\"ID\": [], \"Name\": [], \"Status\": [], \"Messages\": []}\n    for conversation in conversations:\n        df_data[\"ID\"].append(conversation.conversation_id)\n        df_data[\"Name\"].append(conversation.conversation_name)\n        df_data[\"Status\"].append(\"Open\" if conversation.is_active else \"Closed\")\n        df_data[\"Messages\"].append(len(conversation.message_ids))\n    df = pd.DataFrame(\n        pd.DataFrame(df_data),",
        "detail": "demo.ui.components.conversation_list",
        "documentation": {}
    },
    {
        "label": "on_click",
        "kind": 2,
        "importPath": "demo.ui.components.conversation_list",
        "description": "demo.ui.components.conversation_list",
        "peekOfCode": "def on_click(e: me.TableClickEvent):\n  state = me.state(AppState)\n  conversation = state.conversations[e.row_index]\n  state.current_conversation_id = conversation.conversation_id\n  me.query_params.update({\"conversation_id\": conversation.conversation_id})\n  me.navigate(\"/conversation\", query_params=me.query_params)\n  yield",
        "detail": "demo.ui.components.conversation_list",
        "documentation": {}
    },
    {
        "label": "dialog",
        "kind": 2,
        "importPath": "demo.ui.components.dialog",
        "description": "demo.ui.components.dialog",
        "peekOfCode": "def dialog(is_open: bool):\n    with me.box(\n        style=me.Style(\n            background=\"rgba(0,0,0,0.4)\",\n            display=\"block\" if is_open else \"none\",\n            height=\"100%\",\n            overflow_x=\"auto\",\n            overflow_y=\"auto\",\n            position=\"fixed\",\n            width=\"100%\",",
        "detail": "demo.ui.components.dialog",
        "documentation": {}
    },
    {
        "label": "dialog_actions",
        "kind": 2,
        "importPath": "demo.ui.components.dialog",
        "description": "demo.ui.components.dialog",
        "peekOfCode": "def dialog_actions():\n    with me.box(\n        style=me.Style(\n            display=\"flex\", justify_content=\"end\", margin=me.Margin(top=20)\n        )\n    ):\n        me.slot()",
        "detail": "demo.ui.components.dialog",
        "documentation": {}
    },
    {
        "label": "flatten_content",
        "kind": 2,
        "importPath": "demo.ui.components.event_viewer",
        "description": "demo.ui.components.event_viewer",
        "peekOfCode": "def flatten_content(content: list[Tuple[str,str]]) -> str:\n  parts = []\n  for p in content:\n    if p[1] == 'text/plain' or p[1] == 'application/json':\n      parts.append(p[0])\n    else:\n      parts.append(p[1])\n  return '\\n'.join(parts)\n@me.component\ndef event_list():",
        "detail": "demo.ui.components.event_viewer",
        "documentation": {}
    },
    {
        "label": "event_list",
        "kind": 2,
        "importPath": "demo.ui.components.event_viewer",
        "description": "demo.ui.components.event_viewer",
        "peekOfCode": "def event_list():\n  \"\"\"Events list component\"\"\"\n  df_data = {\n      \"Conversation ID\": [],\n      \"Actor\": [],\n      \"Role\": [],\n      \"Id\": [],\n      \"Content\": [],\n  }\n  events = asyncio.run(GetEvents())",
        "detail": "demo.ui.components.event_viewer",
        "documentation": {}
    },
    {
        "label": "FormElement",
        "kind": 6,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "class FormElement:\n  \"\"\"FormElement is a declarative structure for the form rendering\"\"\"\n  name: str = \"\"\n  label: str = \"\"\n  value: str = \"\"\n  formType: Literal[\n    \"color\",\n    \"date\",\n    \"datetime-local\",\n    \"email\",",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "FormState",
        "kind": 6,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "class FormState:\n  message_id: str\n  data: dict[str, str]\n  errors: dict[str, str]\n  elements: list[FormElement]\n  def __post_init__(self):\n    # Parse each element as FormElement. Clean up for non-recursive dict parse\n    for i, element_dict in enumerate(self.elements):\n      if isinstance(element_dict, dict):\n        self.elements[i] = FormElement(**element_dict)",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "class State:\n  \"\"\"This contains the data in the form\"\"\"\n  #forms: dict[str, FormState]\n  forms: dict[str, str]\ndef is_form(message: StateMessage) -> bool:\n  \"\"\"Returns whether the message indicates a form should be rendered\"\"\"\n  if any([x[1] == 'form' for x in message.content]):\n    return True\n  return False\ndef form_sent(message: StateMessage, app_state: AppState) -> bool:",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "is_form",
        "kind": 2,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "def is_form(message: StateMessage) -> bool:\n  \"\"\"Returns whether the message indicates a form should be rendered\"\"\"\n  if any([x[1] == 'form' for x in message.content]):\n    return True\n  return False\ndef form_sent(message: StateMessage, app_state: AppState) -> bool:\n  return message.message_id in app_state.form_responses\ndef render_form(message: StateMessage, app_state: AppState):\n  \"\"\"Renders the form or the data entered in an submitted form\"\"\"\n  # Check if the form was completed, if so, render the content as a card",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "form_sent",
        "kind": 2,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "def form_sent(message: StateMessage, app_state: AppState) -> bool:\n  return message.message_id in app_state.form_responses\ndef render_form(message: StateMessage, app_state: AppState):\n  \"\"\"Renders the form or the data entered in an submitted form\"\"\"\n  # Check if the form was completed, if so, render the content as a card\n  if message.message_id in app_state.completed_forms:\n    render_form_card(message, app_state.completed_forms[message.message_id])\n    return\n  # Otherwise, get the form structure.\n  instructions, form_structure = generate_form_elements(message)",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "render_form",
        "kind": 2,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "def render_form(message: StateMessage, app_state: AppState):\n  \"\"\"Renders the form or the data entered in an submitted form\"\"\"\n  # Check if the form was completed, if so, render the content as a card\n  if message.message_id in app_state.completed_forms:\n    render_form_card(message, app_state.completed_forms[message.message_id])\n    return\n  # Otherwise, get the form structure.\n  instructions, form_structure = generate_form_elements(message)\n  data = {}\n  # Initialize the state data",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "render_form_card",
        "kind": 2,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "def render_form_card(message: StateMessage, data: dict[str, Any] | None):\n  \"\"\"Renders the result of a previous form as a card\"\"\"\n  with me.box(\n    style=me.Style(\n      padding=me.Padding.all(BOX_PADDING),\n      max_width=\"75vw\",\n      background=\"whitesmoke\",\n      border_radius=15,\n      margin=me.Margin(top=5, bottom=20, left=5, right=5),\n      justify_content=(",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "generate_form_elements",
        "kind": 2,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "def generate_form_elements(message: StateMessage) -> Tuple[str, list[FormElement]]:\n  \"\"\"Returns a declarative structure for a form to generate\"\"\"\n  # Get the message part with the form information.\n  form_content = next(filter(lambda x: x[1] == 'form', message.content), None)\n  if not form_content:\n    return []\n  form_info = form_content[0]\n  if not isinstance(form_info, dict):\n    return []\n  return instructions_for_form(form_info),  make_form_elements(form_info)",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "make_form_elements",
        "kind": 2,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "def make_form_elements(form_info: dict[str, Any]) -> list[FormElement]:\n  if 'form' not in form_info or 'properties' not in form_info['form']:\n    return []\n  # This is the key, value pairs of field names -> field info. Now we need to\n  # supplement it.\n  fields = form_info['form']['properties']\n  if ('required' in form_info['form'] and\n      isinstance(form_info['form']['required'], list)):\n    for field in form_info['form']['required']:\n      if field in fields:",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "instructions_for_form",
        "kind": 2,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "def instructions_for_form(form_info: dict[str, Any]) -> str:\n  if 'instructions' in form_info:\n    return form_info['instructions']\n  return \"\"\ndef render_structure(id: str, elements: list[FormElement], instructions: str):\n  with me.box(\n    style=me.Style(\n      padding=me.Padding.all(BOX_PADDING),\n      max_width=\"75vw\",\n      background=\"whitesmoke\",",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "render_structure",
        "kind": 2,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "def render_structure(id: str, elements: list[FormElement], instructions: str):\n  with me.box(\n    style=me.Style(\n      padding=me.Padding.all(BOX_PADDING),\n      max_width=\"75vw\",\n      background=\"whitesmoke\",\n      border_radius=15,\n      margin=me.Margin(top=5, bottom=20, left=5, right=5),\n      box_shadow=(\"0 1px 2px 0 rgba(60, 64, 67, 0.3), \"\n                  \"0 1px 3px 1px rgba(60, 64, 67, 0.15)\"),",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "input_field",
        "kind": 2,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "def input_field(\n  *,\n  id: str,\n  element: FormElement,\n  width: str | int = \"100%\",\n):\n  \"\"\"Renders an individual form input field\"\"\"\n  state = me.state(State)\n  form = FormState(**json.loads(state.forms[id]))\n  key = element.name if element.name else element.label.lower().replace(\" \", \"_\")",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "form_group",
        "kind": 2,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "def form_group(flex_direction: Literal[\"row\", \"column\"] = \"row\"):\n  \"\"\"Groups input fields together visually\"\"\"\n  with me.box(\n    style=me.Style(\n      display=\"flex\", flex_direction=flex_direction, gap=ROW_GAP, width=\"100%\"\n    )\n  ):\n    me.slot()\ndef on_change(e: me.RadioChangeEvent):\n  state = me.state(State)",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "on_change",
        "kind": 2,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "def on_change(e: me.RadioChangeEvent):\n  state = me.state(State)\n  key_parts = e.key.split(\"_\")\n  id = key_parts[0]\n  field = \"_\".join(key_parts[1:])\n  form = FormState(**json.loads(state.forms[id]))\n  form.data[field] = e.value\n  state.forms[id] = form_state_to_string(form)\ndef on_blur(e: me.InputBlurEvent):\n  state = me.state(State)",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "on_blur",
        "kind": 2,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "def on_blur(e: me.InputBlurEvent):\n  state = me.state(State)\n  key_parts = e.key.split(\"_\")\n  id = key_parts[0]\n  field = \"_\".join(key_parts[1:])\n  form = FormState(**json.loads(state.forms[id]))\n  form.data[field] = e.value\n  state.forms[id] = form_state_to_string(form)\nasync def cancel_form(e: me.ClickEvent):\n  message_id = str(uuid.uuid4())",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "form_state_to_string",
        "kind": 2,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "def form_state_to_string(form: FormState) -> str:\n  form_dict = dataclasses.asdict(form)\n  return json.dumps(form_dict)",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "ROW_GAP",
        "kind": 5,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "ROW_GAP = 15\nBOX_PADDING = 20\n@dataclasses.dataclass\nclass FormElement:\n  \"\"\"FormElement is a declarative structure for the form rendering\"\"\"\n  name: str = \"\"\n  label: str = \"\"\n  value: str = \"\"\n  formType: Literal[\n    \"color\",",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "BOX_PADDING",
        "kind": 5,
        "importPath": "demo.ui.components.form_render",
        "description": "demo.ui.components.form_render",
        "peekOfCode": "BOX_PADDING = 20\n@dataclasses.dataclass\nclass FormElement:\n  \"\"\"FormElement is a declarative structure for the form rendering\"\"\"\n  name: str = \"\"\n  label: str = \"\"\n  value: str = \"\"\n  formType: Literal[\n    \"color\",\n    \"date\",",
        "detail": "demo.ui.components.form_render",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 2,
        "importPath": "demo.ui.components.header",
        "description": "demo.ui.components.header",
        "peekOfCode": "def header(title: str, icon: str):\n    \"\"\"Header component\"\"\"\n    with me.box(\n        style=me.Style(\n            display=\"flex\",\n            justify_content=\"space-between\",\n        )\n    ):\n        with me.box(\n            style=me.Style(display=\"flex\", flex_direction=\"row\", gap=5)",
        "detail": "demo.ui.components.header",
        "documentation": {}
    },
    {
        "label": "page_scaffold",
        "kind": 2,
        "importPath": "demo.ui.components.page_scaffold",
        "description": "demo.ui.components.page_scaffold",
        "peekOfCode": "def page_scaffold():\n    \"\"\"page scaffold component\"\"\"\n    app_state = me.state(AppState)\n    action = (\n        AsyncAction(\n            value=app_state,\n            duration_seconds=app_state.polling_interval)\n        if app_state\n        else None\n    )",
        "detail": "demo.ui.components.page_scaffold",
        "documentation": {}
    },
    {
        "label": "page_frame",
        "kind": 2,
        "importPath": "demo.ui.components.page_scaffold",
        "description": "demo.ui.components.page_scaffold",
        "peekOfCode": "def page_frame():\n    \"\"\"Page Frame\"\"\"\n    with me.box(style=MAIN_COLUMN_STYLE):\n        with me.box(style=PAGE_BACKGROUND_STYLE):\n            with me.box(style=PAGE_BACKGROUND_PADDING_STYLE):\n                me.slot()",
        "detail": "demo.ui.components.page_scaffold",
        "documentation": {}
    },
    {
        "label": "polling_buttons",
        "kind": 2,
        "importPath": "demo.ui.components.poller",
        "description": "demo.ui.components.poller",
        "peekOfCode": "def polling_buttons():\n    \"\"\"Polling buttons component\"\"\"\n    state = me.state(AppState)\n    with me.box(\n        style=me.Style(\n            display=\"flex\",\n            justify_content=\"end\",\n        )\n    ):\n      me.button_toggle(",
        "detail": "demo.ui.components.poller",
        "documentation": {}
    },
    {
        "label": "on_change",
        "kind": 2,
        "importPath": "demo.ui.components.poller",
        "description": "demo.ui.components.poller",
        "peekOfCode": "def on_change(e: me.ButtonToggleChangeEvent):\n  state = me.state(AppState)\n  state.polling_interval = int(e.values[0])\nasync def force_refresh(e: me.ClickEvent):\n    \"\"\"Refresh app state event handler\"\"\"\n    yield\n    app_state = me.state(AppState)\n    await UpdateAppState(app_state, app_state.current_conversation_id)\n    yield",
        "detail": "demo.ui.components.poller",
        "documentation": {}
    },
    {
        "label": "on_sidenav_menu_click",
        "kind": 2,
        "importPath": "demo.ui.components.side_nav",
        "description": "demo.ui.components.side_nav",
        "peekOfCode": "def on_sidenav_menu_click(e: me.ClickEvent):  # pylint: disable=unused-argument\n    \"\"\"Side navigation menu click handler\"\"\"\n    state = me.state(AppState)\n    state.sidenav_open = not state.sidenav_open\ndef navigate_to(e: me.ClickEvent):\n    \"\"\"navigate to a specific page\"\"\"\n    s = me.state(AppState)\n    idx = int(e.key)\n    if idx > len(page_json):\n        return",
        "detail": "demo.ui.components.side_nav",
        "documentation": {}
    },
    {
        "label": "navigate_to",
        "kind": 2,
        "importPath": "demo.ui.components.side_nav",
        "description": "demo.ui.components.side_nav",
        "peekOfCode": "def navigate_to(e: me.ClickEvent):\n    \"\"\"navigate to a specific page\"\"\"\n    s = me.state(AppState)\n    idx = int(e.key)\n    if idx > len(page_json):\n        return\n    page = page_json[idx]\n    s.current_page = page[\"route\"]\n    me.navigate(s.current_page)\n    yield",
        "detail": "demo.ui.components.side_nav",
        "documentation": {}
    },
    {
        "label": "sidenav",
        "kind": 2,
        "importPath": "demo.ui.components.side_nav",
        "description": "demo.ui.components.side_nav",
        "peekOfCode": "def sidenav(current_page: str):\n    \"\"\"Render side navigation\"\"\"\n    app_state = me.state(AppState)\n    with me.sidenav(\n        opened=True,\n        style=me.Style(\n            width=SIDENAV_MAX_WIDTH if app_state.sidenav_open else SIDENAV_MIN_WIDTH,\n            background=me.theme_var(\"secondary-container\"),\n        ),\n    ):",
        "detail": "demo.ui.components.side_nav",
        "documentation": {}
    },
    {
        "label": "menu_item",
        "kind": 2,
        "importPath": "demo.ui.components.side_nav",
        "description": "demo.ui.components.side_nav",
        "peekOfCode": "def menu_item(\n    key: int,\n    icon: str,\n    text: str,\n    minimized: bool = True,\n    content_style: me.Style = DEFAULT_MENU_STYLE,\n):\n    \"\"\"render menu item\"\"\"\n    if minimized:  # minimized\n        with me.box(",
        "detail": "demo.ui.components.side_nav",
        "documentation": {}
    },
    {
        "label": "toggle_theme",
        "kind": 2,
        "importPath": "demo.ui.components.side_nav",
        "description": "demo.ui.components.side_nav",
        "peekOfCode": "def toggle_theme(e: me.ClickEvent):  # pylint: disable=unused-argument\n    \"\"\"Toggle theme event\"\"\"\n    s = me.state(AppState)\n    if me.theme_brightness() == \"light\":\n        me.set_theme_mode(\"dark\")\n        s.theme_mode = \"dark\"\n    else:\n        me.set_theme_mode(\"light\")\n        s.theme_mode = \"light\"\ndef theme_toggle_icon(key: int, icon: str, text: str, min: bool = True):",
        "detail": "demo.ui.components.side_nav",
        "documentation": {}
    },
    {
        "label": "theme_toggle_icon",
        "kind": 2,
        "importPath": "demo.ui.components.side_nav",
        "description": "demo.ui.components.side_nav",
        "peekOfCode": "def theme_toggle_icon(key: int, icon: str, text: str, min: bool = True):\n    \"\"\"Theme toggle icon\"\"\"\n    # THEME_TOGGLE_STYLE = me.Style(position=\"absolute\", bottom=50, align_content=\"left\")\n    if min:  # minimized\n        with me.box(\n            style=me.Style(\n                display=\"flex\",\n                flex_direction=\"row\",\n                gap=5,\n                align_items=\"center\",",
        "detail": "demo.ui.components.side_nav",
        "documentation": {}
    },
    {
        "label": "page_json",
        "kind": 5,
        "importPath": "demo.ui.components.side_nav",
        "description": "demo.ui.components.side_nav",
        "peekOfCode": "page_json = [\n    {\"display\": \"Home\", \"icon\": \"message\", \"route\": \"/\"},\n    {\"display\": \"Agents\", \"icon\": \"smart_toy\", \"route\": \"/agents\"},\n    {\"display\": \"Event List\", \"icon\": \"list\", \"route\": \"/event_list\"},\n    {\"display\": \"Task List\", \"icon\": \"task\", \"route\": \"/task_list\"},\n    {\"display\": \"Settings\", \"icon\": \"settings\", \"route\": \"/settings\"},\n]\ndef on_sidenav_menu_click(e: me.ClickEvent):  # pylint: disable=unused-argument\n    \"\"\"Side navigation menu click handler\"\"\"\n    state = me.state(AppState)",
        "detail": "demo.ui.components.side_nav",
        "documentation": {}
    },
    {
        "label": "MENU_BOTTOM",
        "kind": 5,
        "importPath": "demo.ui.components.side_nav",
        "description": "demo.ui.components.side_nav",
        "peekOfCode": "MENU_BOTTOM = me.Style(\n    display=\"flex\",\n    flex_direction=\"column\",\n    position=\"absolute\",\n    bottom=8,\n    align_content=\"left\",\n)",
        "detail": "demo.ui.components.side_nav",
        "documentation": {}
    },
    {
        "label": "message_string",
        "kind": 2,
        "importPath": "demo.ui.components.task_card",
        "description": "demo.ui.components.task_card",
        "peekOfCode": "def message_string(content: ContentPart) -> str:\n  if isinstance(content, str):\n    return content\n  return json.dumps(content)\n@me.component\ndef task_card(tasks: list[SessionTask]):\n  \"\"\"Task card component\"\"\"\n  columns = [\"Conversation ID\", \"Task ID\", \"Description\", \"Status\", \"Output\"]\n  df_data = dict([(c, []) for c in columns])\n  for task in tasks:",
        "detail": "demo.ui.components.task_card",
        "documentation": {}
    },
    {
        "label": "task_card",
        "kind": 2,
        "importPath": "demo.ui.components.task_card",
        "description": "demo.ui.components.task_card",
        "peekOfCode": "def task_card(tasks: list[SessionTask]):\n  \"\"\"Task card component\"\"\"\n  columns = [\"Conversation ID\", \"Task ID\", \"Description\", \"Status\", \"Output\"]\n  df_data = dict([(c, []) for c in columns])\n  for task in tasks:\n    df_data[\"Conversation ID\"].append(task.session_id)\n    df_data[\"Task ID\"].append(task.task.task_id)\n    df_data[\"Description\"].append('\\n'.join(message_string(x[0]) for x in task.task.message.content))\n    df_data[\"Status\"].append(task.task.state)\n    df_data[\"Output\"].append(flatten_artifacts(task.task))",
        "detail": "demo.ui.components.task_card",
        "documentation": {}
    },
    {
        "label": "flatten_artifacts",
        "kind": 2,
        "importPath": "demo.ui.components.task_card",
        "description": "demo.ui.components.task_card",
        "peekOfCode": "def flatten_artifacts(task: StateTask) -> str:\n  parts = []\n  for a in task.artifacts:\n    for p in a:\n      if p[1] == 'text/plain' or p[1] == 'application/json':\n        parts.append(message_string(p[0]))\n      else:\n        parts.append(p[1])\n  return '\\n'.join(parts)",
        "detail": "demo.ui.components.task_card",
        "documentation": {}
    },
    {
        "label": "agent_list_page",
        "kind": 2,
        "importPath": "demo.ui.pages.agent_list",
        "description": "demo.ui.pages.agent_list",
        "peekOfCode": "def agent_list_page(app_state: AppState):\n  \"\"\"Agents List Page\"\"\"\n  state = me.state(AgentState)\n  with page_scaffold():  # pylint: disable=not-context-manager\n    with page_frame():\n      with header(\"Remote Agents\", \"smart_toy\"):\n        pass\n      agents = asyncio.run(ListRemoteAgents())\n      agents_list(agents)\n      with dialog(state.agent_dialog_open):",
        "detail": "demo.ui.pages.agent_list",
        "documentation": {}
    },
    {
        "label": "set_agent_address",
        "kind": 2,
        "importPath": "demo.ui.pages.agent_list",
        "description": "demo.ui.pages.agent_list",
        "peekOfCode": "def set_agent_address(e: me.InputBlurEvent):\n    state = me.state(AgentState)\n    state.agent_address = e.value\ndef load_agent_info(e: me.ClickEvent):\n  state = me.state(AgentState)\n  try:\n    state.error = None\n    agent_card_response = get_agent_card(state.agent_address)\n    state.agent_name = agent_card_response.name\n    state.agent_description = agent_card_response.description",
        "detail": "demo.ui.pages.agent_list",
        "documentation": {}
    },
    {
        "label": "load_agent_info",
        "kind": 2,
        "importPath": "demo.ui.pages.agent_list",
        "description": "demo.ui.pages.agent_list",
        "peekOfCode": "def load_agent_info(e: me.ClickEvent):\n  state = me.state(AgentState)\n  try:\n    state.error = None\n    agent_card_response = get_agent_card(state.agent_address)\n    state.agent_name = agent_card_response.name\n    state.agent_description = agent_card_response.description\n    state.agent_framework_type = agent_card_response.provider.organization if agent_card_response.provider else ''\n    state.input_modes = agent_card_response.defaultInputModes\n    state.output_modes = agent_card_response.defaultOutputModes",
        "detail": "demo.ui.pages.agent_list",
        "documentation": {}
    },
    {
        "label": "cancel_agent_dialog",
        "kind": 2,
        "importPath": "demo.ui.pages.agent_list",
        "description": "demo.ui.pages.agent_list",
        "peekOfCode": "def cancel_agent_dialog(e: me.ClickEvent):\n    state = me.state(AgentState)\n    state.agent_dialog_open = False\nasync def save_agent(e: me.ClickEvent):\n    state = me.state(AgentState)\n    await AddRemoteAgent(state.agent_address)\n    state.agent_address = \"\"\n    state.agent_name = \"\"\n    state.agent_description = \"\"\n    state.agent_dialog_open = False",
        "detail": "demo.ui.pages.agent_list",
        "documentation": {}
    },
    {
        "label": "conversation_page",
        "kind": 2,
        "importPath": "demo.ui.pages.conversation",
        "description": "demo.ui.pages.conversation",
        "peekOfCode": "def conversation_page(app_state: AppState):\n    \"\"\"Conversation Page\"\"\"\n    state = me.state(AppState)\n    with page_scaffold():  # pylint: disable=not-context-manager\n        with page_frame():\n          with header(\"Conversation\", \"chat\"): pass\n          conversation()",
        "detail": "demo.ui.pages.conversation",
        "documentation": {}
    },
    {
        "label": "event_list_page",
        "kind": 2,
        "importPath": "demo.ui.pages.event_list",
        "description": "demo.ui.pages.event_list",
        "peekOfCode": "def event_list_page(app_state: AppState):\n    \"\"\"Agents List Page\"\"\"\n    state = me.state(AgentState)\n    with page_scaffold():  # pylint: disable=not-context-manager\n        with page_frame():\n            with header(\"Event List\", \"list\"): pass\n            event_list()",
        "detail": "demo.ui.pages.event_list",
        "documentation": {}
    },
    {
        "label": "PageState",
        "kind": 6,
        "importPath": "demo.ui.pages.home",
        "description": "demo.ui.pages.home",
        "peekOfCode": "class PageState:\n    \"\"\" Local Page State\"\"\"\n    temp_name: str = \"\"\ndef on_blur_set_name(e: me.InputBlurEvent):\n    \"\"\"input handler\"\"\"\n    state = me.state(PageState)\n    state.temp_name = e.value\ndef on_enter_change_name(e: me.components.input.input.InputEnterEvent):  # pylint: disable=unused-argument\n    \"\"\"change name button handler\"\"\"\n    state = me.state(PageState)",
        "detail": "demo.ui.pages.home",
        "documentation": {}
    },
    {
        "label": "on_blur_set_name",
        "kind": 2,
        "importPath": "demo.ui.pages.home",
        "description": "demo.ui.pages.home",
        "peekOfCode": "def on_blur_set_name(e: me.InputBlurEvent):\n    \"\"\"input handler\"\"\"\n    state = me.state(PageState)\n    state.temp_name = e.value\ndef on_enter_change_name(e: me.components.input.input.InputEnterEvent):  # pylint: disable=unused-argument\n    \"\"\"change name button handler\"\"\"\n    state = me.state(PageState)\n    app_state = me.state(AppState)\n    app_state.name = state.temp_name\n    app_state.greeting = \"\"  # reset greeting",
        "detail": "demo.ui.pages.home",
        "documentation": {}
    },
    {
        "label": "on_enter_change_name",
        "kind": 2,
        "importPath": "demo.ui.pages.home",
        "description": "demo.ui.pages.home",
        "peekOfCode": "def on_enter_change_name(e: me.components.input.input.InputEnterEvent):  # pylint: disable=unused-argument\n    \"\"\"change name button handler\"\"\"\n    state = me.state(PageState)\n    app_state = me.state(AppState)\n    app_state.name = state.temp_name\n    app_state.greeting = \"\"  # reset greeting\n    yield\ndef on_click_change_name(e: me.ClickEvent):  # pylint: disable=unused-argument\n    \"\"\"change name button handler\"\"\"\n    state = me.state(PageState)",
        "detail": "demo.ui.pages.home",
        "documentation": {}
    },
    {
        "label": "on_click_change_name",
        "kind": 2,
        "importPath": "demo.ui.pages.home",
        "description": "demo.ui.pages.home",
        "peekOfCode": "def on_click_change_name(e: me.ClickEvent):  # pylint: disable=unused-argument\n    \"\"\"change name button handler\"\"\"\n    state = me.state(PageState)\n    app_state = me.state(AppState)\n    app_state.name = state.temp_name\n    app_state.greeting = \"\"  # reset greeting\n    yield\ndef home_page_content(app_state: AppState):\n    \"\"\"Home Page\"\"\"\n    with me.box(",
        "detail": "demo.ui.pages.home",
        "documentation": {}
    },
    {
        "label": "home_page_content",
        "kind": 2,
        "importPath": "demo.ui.pages.home",
        "description": "demo.ui.pages.home",
        "peekOfCode": "def home_page_content(app_state: AppState):\n    \"\"\"Home Page\"\"\"\n    with me.box(\n        style=me.Style(\n            display=\"flex\",\n            flex_direction=\"column\",\n            height=\"100%\",\n        ),\n    ):\n        with me.box(",
        "detail": "demo.ui.pages.home",
        "documentation": {}
    },
    {
        "label": "on_selection_change_output_types",
        "kind": 2,
        "importPath": "demo.ui.pages.settings",
        "description": "demo.ui.pages.settings",
        "peekOfCode": "def on_selection_change_output_types(e: me.SelectSelectionChangeEvent):\n  s = me.state(SettingsState)\n  s.output_mime_types = e.values\ndef settings_page_content():\n    \"\"\"Settings Page Content.\"\"\"\n    settings_state = me.state(SettingsState)\n    with page_scaffold():  # pylint: disable=not-context-manager\n        with page_frame():\n            with header(\"Settings\", \"settings\"): pass\n            with me.box(",
        "detail": "demo.ui.pages.settings",
        "documentation": {}
    },
    {
        "label": "settings_page_content",
        "kind": 2,
        "importPath": "demo.ui.pages.settings",
        "description": "demo.ui.pages.settings",
        "peekOfCode": "def settings_page_content():\n    \"\"\"Settings Page Content.\"\"\"\n    settings_state = me.state(SettingsState)\n    with page_scaffold():  # pylint: disable=not-context-manager\n        with page_frame():\n            with header(\"Settings\", \"settings\"): pass\n            with me.box(\n                style=me.Style(\n                    display=\"flex\",\n                    justify_content=\"space-between\",",
        "detail": "demo.ui.pages.settings",
        "documentation": {}
    },
    {
        "label": "task_list_page",
        "kind": 2,
        "importPath": "demo.ui.pages.task_list",
        "description": "demo.ui.pages.task_list",
        "peekOfCode": "def task_list_page(app_state: AppState):\n    \"\"\"Task List Page\"\"\"\n    with page_scaffold():  # pylint: disable=not-context-manager\n        with page_frame():\n            with header(\"Task List\", \"task\"):\n                pass\n            task_card(app_state.task_list)",
        "detail": "demo.ui.pages.task_list",
        "documentation": {}
    },
    {
        "label": "ConversationClient",
        "kind": 6,
        "importPath": "demo.ui.service.client.client",
        "description": "demo.ui.service.client.client",
        "peekOfCode": "class ConversationClient:\n  def __init__(self, base_url):\n    self.base_url = base_url.rstrip(\"/\")\n  async def send_message(self, payload: SendMessageRequest) -> SendMessageResponse:\n    return SendMessageResponse(**await self._send_request(payload))\n  async def _send_request(self, request: JSONRPCRequest) -> dict[str, Any]:\n    async with httpx.AsyncClient() as client:\n      try:\n        response = await client.post(\n          self.base_url + \"/\" + request.method, json=request.model_dump()",
        "detail": "demo.ui.service.client.client",
        "documentation": {}
    },
    {
        "label": "ADKHostManager",
        "kind": 6,
        "importPath": "demo.ui.service.server.adk_host_manager",
        "description": "demo.ui.service.server.adk_host_manager",
        "peekOfCode": "class ADKHostManager(ApplicationManager):\n  \"\"\"An implementation of memory based management with fake agent actions\n  This implements the interface of the ApplicationManager to plug into\n  the AgentServer. This acts as the service contract that the Mesop app\n  uses to send messages to the agent and provide information for the frontend.\n  \"\"\"\n  _conversations: list[Conversation]\n  _messages: list[Message]\n  _tasks: list[Task]\n  _events: dict[str, Event]",
        "detail": "demo.ui.service.server.adk_host_manager",
        "documentation": {}
    },
    {
        "label": "get_message_id",
        "kind": 2,
        "importPath": "demo.ui.service.server.adk_host_manager",
        "description": "demo.ui.service.server.adk_host_manager",
        "peekOfCode": "def get_message_id(m: Message | None) -> str  | None:\n  if not m or not m.metadata or 'message_id' not in m.metadata:\n    return None\n  return m.metadata['message_id']\ndef get_last_message_id(m: Message | None) -> str | None:\n  if not m or not m.metadata or 'last_message_id' not in m.metadata:\n    return None\n  return m.metadata['last_message_id']\ndef task_still_open(task: Task | None) -> bool:\n  if not task:",
        "detail": "demo.ui.service.server.adk_host_manager",
        "documentation": {}
    },
    {
        "label": "get_last_message_id",
        "kind": 2,
        "importPath": "demo.ui.service.server.adk_host_manager",
        "description": "demo.ui.service.server.adk_host_manager",
        "peekOfCode": "def get_last_message_id(m: Message | None) -> str | None:\n  if not m or not m.metadata or 'last_message_id' not in m.metadata:\n    return None\n  return m.metadata['last_message_id']\ndef task_still_open(task: Task | None) -> bool:\n  if not task:\n    return False\n  return task.status.state in [\n      TaskState.SUBMITTED, TaskState.WORKING, TaskState.INPUT_REQUIRED\n  ]",
        "detail": "demo.ui.service.server.adk_host_manager",
        "documentation": {}
    },
    {
        "label": "task_still_open",
        "kind": 2,
        "importPath": "demo.ui.service.server.adk_host_manager",
        "description": "demo.ui.service.server.adk_host_manager",
        "peekOfCode": "def task_still_open(task: Task | None) -> bool:\n  if not task:\n    return False\n  return task.status.state in [\n      TaskState.SUBMITTED, TaskState.WORKING, TaskState.INPUT_REQUIRED\n  ]",
        "detail": "demo.ui.service.server.adk_host_manager",
        "documentation": {}
    },
    {
        "label": "ApplicationManager",
        "kind": 6,
        "importPath": "demo.ui.service.server.application_manager",
        "description": "demo.ui.service.server.application_manager",
        "peekOfCode": "class ApplicationManager(ABC):\n  @abstractmethod\n  def create_conversation(self) -> Conversation:\n    pass\n  @abstractmethod\n  def sanitize_message(self, message: Message) -> Message:\n    pass\n  @abstractmethod\n  async def process_message(self, message: Message):\n    pass",
        "detail": "demo.ui.service.server.application_manager",
        "documentation": {}
    },
    {
        "label": "InMemoryFakeAgentManager",
        "kind": 6,
        "importPath": "demo.ui.service.server.in_memory_manager",
        "description": "demo.ui.service.server.in_memory_manager",
        "peekOfCode": "class InMemoryFakeAgentManager(ApplicationManager):\n  \"\"\"An implementation of memory based management with fake agent actions\n  This implements the interface of the ApplicationManager to plug into\n  the AgentServer. This acts as the service contract that the Mesop app\n  uses to send messages to the agent and provide information for the frontend.\n  \"\"\"\n  _conversations: list[Conversation]\n  _messages: list[Message]\n  _tasks: list[Task]\n  _events: list[Event]",
        "detail": "demo.ui.service.server.in_memory_manager",
        "documentation": {}
    },
    {
        "label": "ConversationServer",
        "kind": 6,
        "importPath": "demo.ui.service.server.server",
        "description": "demo.ui.service.server.server",
        "peekOfCode": "class ConversationServer:\n  \"\"\"ConversationServer is the backend to serve the agent interactions in the UI\n  This defines the interface that is used by the Mesop system to interact with\n  agents and provide details about the executions.\n  \"\"\"\n  def __init__(self, router: APIRouter):\n    agent_manager = os.environ.get(\"A2A_HOST\", \"ADK\")\n    self.manager: ApplicationManager\n    if agent_manager.upper() == \"ADK\":\n      self.manager = ADKHostManager()",
        "detail": "demo.ui.service.server.server",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class Conversation(BaseModel):\n  conversation_id: str\n  is_active: bool\n  name: str = ''\n  task_ids: list[str] = Field(default_factory=list)\n  messages: list[Message] = Field(default_factory=list)\nclass Event(BaseModel):\n  id: str\n  actor: str = \"\"\n  # TODO: Extend to support internal concepts for models, like function calls.",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class Event(BaseModel):\n  id: str\n  actor: str = \"\"\n  # TODO: Extend to support internal concepts for models, like function calls.\n  content: Message\n  timestamp: float\nclass SendMessageRequest(JSONRPCRequest):\n  method: Literal[\"message/send\"] = \"message/send\"\n  params: Message\nclass ListMessageRequest(JSONRPCRequest):",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "SendMessageRequest",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class SendMessageRequest(JSONRPCRequest):\n  method: Literal[\"message/send\"] = \"message/send\"\n  params: Message\nclass ListMessageRequest(JSONRPCRequest):\n  method: Literal[\"message/list\"] = \"message/list\"\n  # This is the conversation id\n  params: str\nclass ListMessageResponse(JSONRPCResponse):\n  result: list[Message] | None = None\nclass MessageInfo(BaseModel):",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "ListMessageRequest",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class ListMessageRequest(JSONRPCRequest):\n  method: Literal[\"message/list\"] = \"message/list\"\n  # This is the conversation id\n  params: str\nclass ListMessageResponse(JSONRPCResponse):\n  result: list[Message] | None = None\nclass MessageInfo(BaseModel):\n  message_id: str\n  conversation_id: str\nclass SendMessageResponse(JSONRPCResponse):",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "ListMessageResponse",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class ListMessageResponse(JSONRPCResponse):\n  result: list[Message] | None = None\nclass MessageInfo(BaseModel):\n  message_id: str\n  conversation_id: str\nclass SendMessageResponse(JSONRPCResponse):\n  result: Message | MessageInfo | None = None\nclass GetEventRequest(JSONRPCRequest):\n  method: Literal[\"events/get\"] = \"events/get\"\nclass GetEventResponse(JSONRPCResponse):",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "MessageInfo",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class MessageInfo(BaseModel):\n  message_id: str\n  conversation_id: str\nclass SendMessageResponse(JSONRPCResponse):\n  result: Message | MessageInfo | None = None\nclass GetEventRequest(JSONRPCRequest):\n  method: Literal[\"events/get\"] = \"events/get\"\nclass GetEventResponse(JSONRPCResponse):\n  result: list[Event] | None = None\nclass ListConversationRequest(JSONRPCRequest):",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "SendMessageResponse",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class SendMessageResponse(JSONRPCResponse):\n  result: Message | MessageInfo | None = None\nclass GetEventRequest(JSONRPCRequest):\n  method: Literal[\"events/get\"] = \"events/get\"\nclass GetEventResponse(JSONRPCResponse):\n  result: list[Event] | None = None\nclass ListConversationRequest(JSONRPCRequest):\n  method: Literal[\"conversation/list\"] = \"conversation/list\"\nclass ListConversationResponse(JSONRPCResponse):\n  result: list[Conversation] | None = None",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "GetEventRequest",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class GetEventRequest(JSONRPCRequest):\n  method: Literal[\"events/get\"] = \"events/get\"\nclass GetEventResponse(JSONRPCResponse):\n  result: list[Event] | None = None\nclass ListConversationRequest(JSONRPCRequest):\n  method: Literal[\"conversation/list\"] = \"conversation/list\"\nclass ListConversationResponse(JSONRPCResponse):\n  result: list[Conversation] | None = None\nclass PendingMessageRequest(JSONRPCRequest):\n  method: Literal[\"message/pending\"] = \"message/pending\"",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "GetEventResponse",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class GetEventResponse(JSONRPCResponse):\n  result: list[Event] | None = None\nclass ListConversationRequest(JSONRPCRequest):\n  method: Literal[\"conversation/list\"] = \"conversation/list\"\nclass ListConversationResponse(JSONRPCResponse):\n  result: list[Conversation] | None = None\nclass PendingMessageRequest(JSONRPCRequest):\n  method: Literal[\"message/pending\"] = \"message/pending\"\nclass PendingMessageResponse(JSONRPCResponse):\n  result: list[Tuple[str, str]] | None = None",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "ListConversationRequest",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class ListConversationRequest(JSONRPCRequest):\n  method: Literal[\"conversation/list\"] = \"conversation/list\"\nclass ListConversationResponse(JSONRPCResponse):\n  result: list[Conversation] | None = None\nclass PendingMessageRequest(JSONRPCRequest):\n  method: Literal[\"message/pending\"] = \"message/pending\"\nclass PendingMessageResponse(JSONRPCResponse):\n  result: list[Tuple[str, str]] | None = None\nclass CreateConversationRequest(JSONRPCRequest):\n  method: Literal[\"conversation/create\"] = \"conversation/create\"",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "ListConversationResponse",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class ListConversationResponse(JSONRPCResponse):\n  result: list[Conversation] | None = None\nclass PendingMessageRequest(JSONRPCRequest):\n  method: Literal[\"message/pending\"] = \"message/pending\"\nclass PendingMessageResponse(JSONRPCResponse):\n  result: list[Tuple[str, str]] | None = None\nclass CreateConversationRequest(JSONRPCRequest):\n  method: Literal[\"conversation/create\"] = \"conversation/create\"\nclass CreateConversationResponse(JSONRPCResponse):\n  result: Conversation | None = None",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "PendingMessageRequest",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class PendingMessageRequest(JSONRPCRequest):\n  method: Literal[\"message/pending\"] = \"message/pending\"\nclass PendingMessageResponse(JSONRPCResponse):\n  result: list[Tuple[str, str]] | None = None\nclass CreateConversationRequest(JSONRPCRequest):\n  method: Literal[\"conversation/create\"] = \"conversation/create\"\nclass CreateConversationResponse(JSONRPCResponse):\n  result: Conversation | None = None\nclass ListTaskRequest(JSONRPCRequest):\n  method: Literal[\"task/list\"] = \"task/list\"",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "PendingMessageResponse",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class PendingMessageResponse(JSONRPCResponse):\n  result: list[Tuple[str, str]] | None = None\nclass CreateConversationRequest(JSONRPCRequest):\n  method: Literal[\"conversation/create\"] = \"conversation/create\"\nclass CreateConversationResponse(JSONRPCResponse):\n  result: Conversation | None = None\nclass ListTaskRequest(JSONRPCRequest):\n  method: Literal[\"task/list\"] = \"task/list\"\nclass ListTaskResponse(JSONRPCResponse):\n  result: list[Task] | None = None",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "CreateConversationRequest",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class CreateConversationRequest(JSONRPCRequest):\n  method: Literal[\"conversation/create\"] = \"conversation/create\"\nclass CreateConversationResponse(JSONRPCResponse):\n  result: Conversation | None = None\nclass ListTaskRequest(JSONRPCRequest):\n  method: Literal[\"task/list\"] = \"task/list\"\nclass ListTaskResponse(JSONRPCResponse):\n  result: list[Task] | None = None\nclass RegisterAgentRequest(JSONRPCRequest):\n  method: Literal[\"agent/register\"] = \"agent/register\"",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "CreateConversationResponse",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class CreateConversationResponse(JSONRPCResponse):\n  result: Conversation | None = None\nclass ListTaskRequest(JSONRPCRequest):\n  method: Literal[\"task/list\"] = \"task/list\"\nclass ListTaskResponse(JSONRPCResponse):\n  result: list[Task] | None = None\nclass RegisterAgentRequest(JSONRPCRequest):\n  method: Literal[\"agent/register\"] = \"agent/register\"\n  # This is the base url of the agent card\n  params: str | None = None",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "ListTaskRequest",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class ListTaskRequest(JSONRPCRequest):\n  method: Literal[\"task/list\"] = \"task/list\"\nclass ListTaskResponse(JSONRPCResponse):\n  result: list[Task] | None = None\nclass RegisterAgentRequest(JSONRPCRequest):\n  method: Literal[\"agent/register\"] = \"agent/register\"\n  # This is the base url of the agent card\n  params: str | None = None\nclass RegisterAgentResponse(JSONRPCResponse):\n  result: str | None = None",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "ListTaskResponse",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class ListTaskResponse(JSONRPCResponse):\n  result: list[Task] | None = None\nclass RegisterAgentRequest(JSONRPCRequest):\n  method: Literal[\"agent/register\"] = \"agent/register\"\n  # This is the base url of the agent card\n  params: str | None = None\nclass RegisterAgentResponse(JSONRPCResponse):\n  result: str | None = None\nclass ListAgentRequest(JSONRPCRequest):\n  method: Literal[\"agent/list\"] = \"agent/list\"",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "RegisterAgentRequest",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class RegisterAgentRequest(JSONRPCRequest):\n  method: Literal[\"agent/register\"] = \"agent/register\"\n  # This is the base url of the agent card\n  params: str | None = None\nclass RegisterAgentResponse(JSONRPCResponse):\n  result: str | None = None\nclass ListAgentRequest(JSONRPCRequest):\n  method: Literal[\"agent/list\"] = \"agent/list\"\nclass ListAgentResponse(JSONRPCResponse):\n  result: list[AgentCard] | None = None",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "RegisterAgentResponse",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class RegisterAgentResponse(JSONRPCResponse):\n  result: str | None = None\nclass ListAgentRequest(JSONRPCRequest):\n  method: Literal[\"agent/list\"] = \"agent/list\"\nclass ListAgentResponse(JSONRPCResponse):\n  result: list[AgentCard] | None = None\nAgentRequest = TypeAdapter(\n    Annotated[\n        Union[\n            SendMessageRequest,",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "ListAgentRequest",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class ListAgentRequest(JSONRPCRequest):\n  method: Literal[\"agent/list\"] = \"agent/list\"\nclass ListAgentResponse(JSONRPCResponse):\n  result: list[AgentCard] | None = None\nAgentRequest = TypeAdapter(\n    Annotated[\n        Union[\n            SendMessageRequest,\n            ListConversationRequest,\n        ],",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "ListAgentResponse",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class ListAgentResponse(JSONRPCResponse):\n  result: list[AgentCard] | None = None\nAgentRequest = TypeAdapter(\n    Annotated[\n        Union[\n            SendMessageRequest,\n            ListConversationRequest,\n        ],\n        Field(discriminator=\"method\"),\n    ]",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "AgentClientError",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class AgentClientError(Exception):\n    pass\nclass AgentClientHTTPError(AgentClientError):\n    def __init__(self, status_code: int, message: str):\n        self.status_code = status_code\n        self.message = message\n        super().__init__(f\"HTTP Error {status_code}: {message}\")\nclass AgentClientJSONError(AgentClientError):\n    def __init__(self, message: str):\n        self.message = message",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "AgentClientHTTPError",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class AgentClientHTTPError(AgentClientError):\n    def __init__(self, status_code: int, message: str):\n        self.status_code = status_code\n        self.message = message\n        super().__init__(f\"HTTP Error {status_code}: {message}\")\nclass AgentClientJSONError(AgentClientError):\n    def __init__(self, message: str):\n        self.message = message\n        super().__init__(f\"JSON Error: {message}\")",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "AgentClientJSONError",
        "kind": 6,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "class AgentClientJSONError(AgentClientError):\n    def __init__(self, message: str):\n        self.message = message\n        super().__init__(f\"JSON Error: {message}\")",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "AgentRequest",
        "kind": 5,
        "importPath": "demo.ui.service.types",
        "description": "demo.ui.service.types",
        "peekOfCode": "AgentRequest = TypeAdapter(\n    Annotated[\n        Union[\n            SendMessageRequest,\n            ListConversationRequest,\n        ],\n        Field(discriminator=\"method\"),\n    ]\n)\nclass AgentClientError(Exception):",
        "detail": "demo.ui.service.types",
        "documentation": {}
    },
    {
        "label": "AgentState",
        "kind": 6,
        "importPath": "demo.ui.state.agent_state",
        "description": "demo.ui.state.agent_state",
        "peekOfCode": "class AgentState:\n  \"\"\"Agents List State\"\"\"\n  agent_dialog_open: bool = False\n  agent_address: str = \"\"\n  agent_name: str = \"\"\n  agent_description: str = \"\"\n  input_modes: list[str]\n  output_modes: list[str]\n  stream_supported: bool = False\n  push_notifications_supported: bool = False",
        "detail": "demo.ui.state.agent_state",
        "documentation": {}
    },
    {
        "label": "GetMessageAliases",
        "kind": 2,
        "importPath": "demo.ui.state.host_agent_service",
        "description": "demo.ui.state.host_agent_service",
        "peekOfCode": "def GetMessageAliases():\n  return {}\nasync def GetTasks():\n  client = ConversationClient(server_url)\n  try:\n    response = await client.list_tasks(ListTaskRequest())\n    return response.result\n  except Exception as e:\n    print(\"Failed to list tasks \", e)\nasync def ListMessages(conversation_id: str) -> list[Message]:",
        "detail": "demo.ui.state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "convert_message_to_state",
        "kind": 2,
        "importPath": "demo.ui.state.host_agent_service",
        "description": "demo.ui.state.host_agent_service",
        "peekOfCode": "def convert_message_to_state(message: Message) -> StateMessage:\n  if not message:\n    return StateMessage()\n  return StateMessage(\n      message_id = extract_message_id(message),\n      role = message.role,\n      content = extract_content(message.parts),\n  )\ndef convert_conversation_to_state(conversation: Conversation) -> StateConversation:\n  return StateConversation(",
        "detail": "demo.ui.state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "convert_conversation_to_state",
        "kind": 2,
        "importPath": "demo.ui.state.host_agent_service",
        "description": "demo.ui.state.host_agent_service",
        "peekOfCode": "def convert_conversation_to_state(conversation: Conversation) -> StateConversation:\n  return StateConversation(\n      conversation_id = conversation.conversation_id,\n      conversation_name = conversation.name,\n      is_active = conversation.is_active,\n      message_ids = [extract_message_id(x) for x in conversation.messages],\n  )\ndef convert_task_to_state(task: Task) -> StateTask:\n  # Get the first message as the description\n  message = task.history[0]",
        "detail": "demo.ui.state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "convert_task_to_state",
        "kind": 2,
        "importPath": "demo.ui.state.host_agent_service",
        "description": "demo.ui.state.host_agent_service",
        "peekOfCode": "def convert_task_to_state(task: Task) -> StateTask:\n  # Get the first message as the description\n  message = task.history[0]\n  last_message = task.history[-1]\n  output = [extract_content(a.parts) for a in task.artifacts] if task.artifacts else []\n  if last_message != message:\n    output = [extract_content(last_message.parts)] + output\n  return StateTask(\n      task_id=task.id,\n      session_id=task.sessionId,",
        "detail": "demo.ui.state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "convert_event_to_state",
        "kind": 2,
        "importPath": "demo.ui.state.host_agent_service",
        "description": "demo.ui.state.host_agent_service",
        "peekOfCode": "def convert_event_to_state(event: Event) -> StateEvent:\n  return StateEvent(\n      conversation_id=extract_message_conversation(event.content),\n      actor=event.actor,\n      role=event.content.role,\n      content=extract_content(event.content.parts),\n  )\ndef extract_content(message_parts: list[Part]) -> list[Tuple[str | dict[str, Any], str]]:\n  parts = []\n  if not message_parts:",
        "detail": "demo.ui.state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "extract_content",
        "kind": 2,
        "importPath": "demo.ui.state.host_agent_service",
        "description": "demo.ui.state.host_agent_service",
        "peekOfCode": "def extract_content(message_parts: list[Part]) -> list[Tuple[str | dict[str, Any], str]]:\n  parts = []\n  if not message_parts:\n    return []\n  for p in message_parts:\n    if p.type == 'text':\n      parts.append((p.text, 'text/plain'))\n    elif p.type == 'file':\n      if p.file.bytes:\n        parts.append((p.file.bytes, p.file.mimeType))",
        "detail": "demo.ui.state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "extract_message_id",
        "kind": 2,
        "importPath": "demo.ui.state.host_agent_service",
        "description": "demo.ui.state.host_agent_service",
        "peekOfCode": "def extract_message_id(message: Message) -> str:\n  if message.metadata and 'message_id' in message.metadata:\n    return message.metadata['message_id']\n  return \"\"\ndef extract_message_conversation(message: Task) -> str:\n  if message.metadata and 'conversation_id' in message.metadata:\n    return message.metadata['conversation_id']\n  return \"\"\ndef extract_conversation_id(task: Task) -> str:\n  if task.sessionId:",
        "detail": "demo.ui.state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "extract_message_conversation",
        "kind": 2,
        "importPath": "demo.ui.state.host_agent_service",
        "description": "demo.ui.state.host_agent_service",
        "peekOfCode": "def extract_message_conversation(message: Task) -> str:\n  if message.metadata and 'conversation_id' in message.metadata:\n    return message.metadata['conversation_id']\n  return \"\"\ndef extract_conversation_id(task: Task) -> str:\n  if task.sessionId:\n    return task.sessionId\n  # Tries to find the first conversation id for the message in the task.\n  if (\n      task.status.message and",
        "detail": "demo.ui.state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "extract_conversation_id",
        "kind": 2,
        "importPath": "demo.ui.state.host_agent_service",
        "description": "demo.ui.state.host_agent_service",
        "peekOfCode": "def extract_conversation_id(task: Task) -> str:\n  if task.sessionId:\n    return task.sessionId\n  # Tries to find the first conversation id for the message in the task.\n  if (\n      task.status.message and\n      task.status.message.metadata and\n      'conversation_id' in task.status.message.metadata):\n    return task.status.message.metadata['conversation_id']\n  # Now check if maybe the task has conversation id in metadata.",
        "detail": "demo.ui.state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "server_url",
        "kind": 5,
        "importPath": "demo.ui.state.host_agent_service",
        "description": "demo.ui.state.host_agent_service",
        "peekOfCode": "server_url = \"http://localhost:12000\"\nasync def ListConversations() -> list[Conversation]:\n  client = ConversationClient(server_url)\n  try:\n    response = await client.list_conversation(ListConversationRequest())\n    return response.result\n  except Exception as e:\n    print(\"Failed to list conversations: \", e)\nasync def SendMessage(message: Message) -> str | None:\n  client = ConversationClient(server_url)",
        "detail": "demo.ui.state.host_agent_service",
        "documentation": {}
    },
    {
        "label": "StateConversation",
        "kind": 6,
        "importPath": "demo.ui.state.state",
        "description": "demo.ui.state.state",
        "peekOfCode": "class StateConversation:\n  \"\"\"StateConversation provides mesop state compliant view of a conversation\"\"\"\n  conversation_id: str = \"\"\n  conversation_name: str = \"\"\n  is_active: bool = True\n  message_ids: list[str] = dataclasses.field(default_factory=list)\n@dataclass\nclass StateMessage:\n  \"\"\"StateMessage provides mesop state compliant view of a message\"\"\"\n  message_id: str = \"\"",
        "detail": "demo.ui.state.state",
        "documentation": {}
    },
    {
        "label": "StateMessage",
        "kind": 6,
        "importPath": "demo.ui.state.state",
        "description": "demo.ui.state.state",
        "peekOfCode": "class StateMessage:\n  \"\"\"StateMessage provides mesop state compliant view of a message\"\"\"\n  message_id: str = \"\"\n  role: str = \"\"\n  # Each content entry is a content, media type pair.\n  content: list[Tuple[ContentPart, str]] = dataclasses.field(default_factory=list)\n@dataclass\nclass StateTask:\n  \"\"\"StateTask provides mesop state compliant view of task\"\"\"\n  task_id: str = \"\"",
        "detail": "demo.ui.state.state",
        "documentation": {}
    },
    {
        "label": "StateTask",
        "kind": 6,
        "importPath": "demo.ui.state.state",
        "description": "demo.ui.state.state",
        "peekOfCode": "class StateTask:\n  \"\"\"StateTask provides mesop state compliant view of task\"\"\"\n  task_id: str = \"\"\n  session_id: str | None = None\n  state: str | None = None\n  message: StateMessage = dataclasses.field(default_factory=StateMessage)\n  artifacts: list[list[Tuple[ContentPart,str]]] = dataclasses.field(default_factory=list)\n@dataclass\nclass SessionTask:\n  \"\"\"SessionTask organizes tasks based on conversation\"\"\"",
        "detail": "demo.ui.state.state",
        "documentation": {}
    },
    {
        "label": "SessionTask",
        "kind": 6,
        "importPath": "demo.ui.state.state",
        "description": "demo.ui.state.state",
        "peekOfCode": "class SessionTask:\n  \"\"\"SessionTask organizes tasks based on conversation\"\"\"\n  session_id: str = \"\"\n  task: StateTask = dataclasses.field(default_factory=StateTask)\n@dataclass\nclass StateEvent:\n  \"\"\"StateEvent provides mesop state compliant view of event\"\"\"\n  conversation_id: str = \"\"\n  actor: str = \"\"\n  role: str = \"\"",
        "detail": "demo.ui.state.state",
        "documentation": {}
    },
    {
        "label": "StateEvent",
        "kind": 6,
        "importPath": "demo.ui.state.state",
        "description": "demo.ui.state.state",
        "peekOfCode": "class StateEvent:\n  \"\"\"StateEvent provides mesop state compliant view of event\"\"\"\n  conversation_id: str = \"\"\n  actor: str = \"\"\n  role: str = \"\"\n  id: str = \"\"\n  # Each entry is a pair of (content, media type)\n  content: list[Tuple[ContentPart, str]] = dataclasses.field(default_factory=list)\n@me.stateclass\nclass AppState:",
        "detail": "demo.ui.state.state",
        "documentation": {}
    },
    {
        "label": "AppState",
        "kind": 6,
        "importPath": "demo.ui.state.state",
        "description": "demo.ui.state.state",
        "peekOfCode": "class AppState:\n  \"\"\"Mesop Application State\"\"\"\n  sidenav_open: bool = False\n  theme_mode: Literal[\"system\", \"light\", \"dark\"] = \"system\"\n  current_conversation_id: str = \"\"\n  conversations: list[StateConversation]\n  messages: list[StateMessage]\n  task_list: list[SessionTask] = dataclasses.field(default_factory=list)\n  background_tasks: dict[str,str] = dataclasses.field(default_factory=dict)\n  message_aliases: dict[str, str] = dataclasses.field(default_factory=dict)",
        "detail": "demo.ui.state.state",
        "documentation": {}
    },
    {
        "label": "SettingsState",
        "kind": 6,
        "importPath": "demo.ui.state.state",
        "description": "demo.ui.state.state",
        "peekOfCode": "class SettingsState:\n  \"\"\"Settings State\"\"\"\n  output_mime_types: list[str] = dataclasses.field(\n    default_factory=lambda: [\n      \"image/*\",\n      \"text/plain\",\n    ]\n  )",
        "detail": "demo.ui.state.state",
        "documentation": {}
    },
    {
        "label": "ContentPart",
        "kind": 5,
        "importPath": "demo.ui.state.state",
        "description": "demo.ui.state.state",
        "peekOfCode": "ContentPart = str | dict[str,Any]\n@dataclass\nclass StateConversation:\n  \"\"\"StateConversation provides mesop state compliant view of a conversation\"\"\"\n  conversation_id: str = \"\"\n  conversation_name: str = \"\"\n  is_active: bool = True\n  message_ids: list[str] = dataclasses.field(default_factory=list)\n@dataclass\nclass StateMessage:",
        "detail": "demo.ui.state.state",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MENU_STYLE",
        "kind": 5,
        "importPath": "demo.ui.styles.styles",
        "description": "demo.ui.styles.styles",
        "peekOfCode": "DEFAULT_MENU_STYLE = me.Style(align_content=\"left\")\n_FANCY_TEXT_GRADIENT = me.Style(\n    color=\"transparent\",\n    background=(\n        \"linear-gradient(72.83deg,#4285f4 11.63%,#9b72cb 40.43%,#d96570 68.07%)\"\n        \" text\"\n    ),\n)\nMAIN_COLUMN_STYLE = me.Style(\n    display=\"flex\",",
        "detail": "demo.ui.styles.styles",
        "documentation": {}
    },
    {
        "label": "_FANCY_TEXT_GRADIENT",
        "kind": 5,
        "importPath": "demo.ui.styles.styles",
        "description": "demo.ui.styles.styles",
        "peekOfCode": "_FANCY_TEXT_GRADIENT = me.Style(\n    color=\"transparent\",\n    background=(\n        \"linear-gradient(72.83deg,#4285f4 11.63%,#9b72cb 40.43%,#d96570 68.07%)\"\n        \" text\"\n    ),\n)\nMAIN_COLUMN_STYLE = me.Style(\n    display=\"flex\",\n    flex_direction=\"column\",",
        "detail": "demo.ui.styles.styles",
        "documentation": {}
    },
    {
        "label": "MAIN_COLUMN_STYLE",
        "kind": 5,
        "importPath": "demo.ui.styles.styles",
        "description": "demo.ui.styles.styles",
        "peekOfCode": "MAIN_COLUMN_STYLE = me.Style(\n    display=\"flex\",\n    flex_direction=\"column\",\n    height=\"100%\",\n)\nPAGE_BACKGROUND_STYLE = me.Style(\n    background=me.theme_var(\"background\"),\n    height=\"100%\",\n    overflow_y=\"scroll\",\n    margin=me.Margin(bottom=20),",
        "detail": "demo.ui.styles.styles",
        "documentation": {}
    },
    {
        "label": "PAGE_BACKGROUND_STYLE",
        "kind": 5,
        "importPath": "demo.ui.styles.styles",
        "description": "demo.ui.styles.styles",
        "peekOfCode": "PAGE_BACKGROUND_STYLE = me.Style(\n    background=me.theme_var(\"background\"),\n    height=\"100%\",\n    overflow_y=\"scroll\",\n    margin=me.Margin(bottom=20),\n)\nPAGE_BACKGROUND_PADDING_STYLE = me.Style(\n    background=me.theme_var(\"background\"),\n    padding=me.Padding(top=24, left=24, right=24, bottom=24),\n    display=\"flex\",",
        "detail": "demo.ui.styles.styles",
        "documentation": {}
    },
    {
        "label": "PAGE_BACKGROUND_PADDING_STYLE",
        "kind": 5,
        "importPath": "demo.ui.styles.styles",
        "description": "demo.ui.styles.styles",
        "peekOfCode": "PAGE_BACKGROUND_PADDING_STYLE = me.Style(\n    background=me.theme_var(\"background\"),\n    padding=me.Padding(top=24, left=24, right=24, bottom=24),\n    display=\"flex\",\n    flex_direction=\"column\",\n)",
        "detail": "demo.ui.styles.styles",
        "documentation": {}
    },
    {
        "label": "get_agent_card",
        "kind": 2,
        "importPath": "demo.ui.utils.agent_card",
        "description": "demo.ui.utils.agent_card",
        "peekOfCode": "def get_agent_card(remote_agent_address: str) -> AgentCard:\n  \"\"\"Get the agent card.\"\"\"\n  agent_card = requests.get(\n      f\"http://{remote_agent_address}/.well-known/agent.json\"\n  )\n  return AgentCard(**agent_card.json())",
        "detail": "demo.ui.utils.agent_card",
        "documentation": {}
    },
    {
        "label": "on_load",
        "kind": 2,
        "importPath": "demo.ui.main",
        "description": "demo.ui.main",
        "peekOfCode": "def on_load(e: me.LoadEvent):  # pylint: disable=unused-argument\n    \"\"\"On load event\"\"\"\n    state = me.state(AppState)\n    me.set_theme_mode(state.theme_mode)\n    if \"conversation_id\" in me.query_params:\n      state.current_conversation_id = me.query_params[\"conversation_id\"]\n    else:\n      state.current_conversation_id = \"\"\n# Policy to allow the lit custom element to load\nsecurity_policy=me.SecurityPolicy(",
        "detail": "demo.ui.main",
        "documentation": {}
    },
    {
        "label": "home_page",
        "kind": 2,
        "importPath": "demo.ui.main",
        "description": "demo.ui.main",
        "peekOfCode": "def home_page():\n    \"\"\"Main Page\"\"\"\n    state = me.state(AppState)\n    with page_scaffold():  # pylint: disable=not-context-manager\n        home_page_content(state)\n@me.page(\n    path=\"/agents\",\n    title=\"Agents\",\n    on_load=on_load,\n    security_policy=security_policy,",
        "detail": "demo.ui.main",
        "documentation": {}
    },
    {
        "label": "another_page",
        "kind": 2,
        "importPath": "demo.ui.main",
        "description": "demo.ui.main",
        "peekOfCode": "def another_page():\n    \"\"\"Another Page\"\"\"\n    agent_list_page(me.state(AppState))\n@me.page(\n    path=\"/conversation\",\n    title=\"Conversation\",\n    on_load=on_load,\n    security_policy=security_policy,\n)\ndef chat_page():",
        "detail": "demo.ui.main",
        "documentation": {}
    },
    {
        "label": "chat_page",
        "kind": 2,
        "importPath": "demo.ui.main",
        "description": "demo.ui.main",
        "peekOfCode": "def chat_page():\n    \"\"\"Conversation Page.\"\"\"\n    conversation_page(me.state(AppState))\n@me.page(\n    path=\"/event_list\",\n    title=\"Event List\",\n    on_load=on_load,\n    security_policy=security_policy,\n)\ndef event_page():",
        "detail": "demo.ui.main",
        "documentation": {}
    },
    {
        "label": "event_page",
        "kind": 2,
        "importPath": "demo.ui.main",
        "description": "demo.ui.main",
        "peekOfCode": "def event_page():\n    \"\"\"Event List Page.\"\"\"\n    event_list_page(me.state(AppState))\n@me.page(\n    path=\"/settings\",\n    title=\"Settings\",\n    on_load=on_load,\n    security_policy=security_policy,\n)\ndef settings_page():",
        "detail": "demo.ui.main",
        "documentation": {}
    },
    {
        "label": "settings_page",
        "kind": 2,
        "importPath": "demo.ui.main",
        "description": "demo.ui.main",
        "peekOfCode": "def settings_page():\n    \"\"\"Settings Page.\"\"\"\n    settings_page_content()\n@me.page(\n    path=\"/task_list\",\n    title=\"Task List\",\n    on_load=on_load,\n    security_policy=security_policy,\n)\ndef task_page():",
        "detail": "demo.ui.main",
        "documentation": {}
    },
    {
        "label": "task_page",
        "kind": 2,
        "importPath": "demo.ui.main",
        "description": "demo.ui.main",
        "peekOfCode": "def task_page():\n    \"\"\"Task List Page.\"\"\"\n    task_list_page(me.state(AppState))\n# Setup the server global objects\napp = FastAPI()\nrouter = APIRouter()\nagent_server = ConversationServer(router)\napp.include_router(router)\napp.mount(\n    \"/\",",
        "detail": "demo.ui.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "demo.ui.main",
        "description": "demo.ui.main",
        "peekOfCode": "app = FastAPI()\nrouter = APIRouter()\nagent_server = ConversationServer(router)\napp.include_router(router)\napp.mount(\n    \"/\",\n    WSGIMiddleware(\n        me.create_wsgi_app(debug_mode=os.environ.get(\"DEBUG_MODE\", \"\") == \"true\")\n    ),\n)",
        "detail": "demo.ui.main",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "demo.ui.main",
        "description": "demo.ui.main",
        "peekOfCode": "router = APIRouter()\nagent_server = ConversationServer(router)\napp.include_router(router)\napp.mount(\n    \"/\",\n    WSGIMiddleware(\n        me.create_wsgi_app(debug_mode=os.environ.get(\"DEBUG_MODE\", \"\") == \"true\")\n    ),\n)\nif __name__ == \"__main__\":    ",
        "detail": "demo.ui.main",
        "documentation": {}
    },
    {
        "label": "agent_server",
        "kind": 5,
        "importPath": "demo.ui.main",
        "description": "demo.ui.main",
        "peekOfCode": "agent_server = ConversationServer(router)\napp.include_router(router)\napp.mount(\n    \"/\",\n    WSGIMiddleware(\n        me.create_wsgi_app(debug_mode=os.environ.get(\"DEBUG_MODE\", \"\") == \"true\")\n    ),\n)\nif __name__ == \"__main__\":    \n    if not os.getenv(\"GOOGLE_API_KEY\"):",
        "detail": "demo.ui.main",
        "documentation": {}
    },
    {
        "label": "Imagedata",
        "kind": 6,
        "importPath": "samples.python.agents.crewai.agent",
        "description": "samples.python.agents.crewai.agent",
        "peekOfCode": "class Imagedata(BaseModel):\n  \"\"\"Represents image data.\n  Attributes:\n    id: Unique identifier for the image.\n    name: Name of the image.\n    mime_type: MIME type of the image.\n    bytes: Base64 encoded image data.\n    error: Error message if there was an issue with the image.\n  \"\"\"\n  id: str | None = None",
        "detail": "samples.python.agents.crewai.agent",
        "documentation": {}
    },
    {
        "label": "ImageGenerationAgent",
        "kind": 6,
        "importPath": "samples.python.agents.crewai.agent",
        "description": "samples.python.agents.crewai.agent",
        "peekOfCode": "class ImageGenerationAgent:\n  \"\"\"Agent that generates images based on user prompts.\"\"\"\n  SUPPORTED_CONTENT_TYPES = [\"text\", \"text/plain\", \"image/png\"]\n  def __init__(self):\n    self.model = LLM(model=\"gemini/gemini-2.0-flash\", api_key=get_api_key())\n    self.image_creator_agent = Agent(\n        role=\"Image Creation Expert\",\n        goal=(\n            \"Generate an image based on the user's text prompt.If the prompt is\"\n            \" vague, ask clarifying questions (though the tool currently\"",
        "detail": "samples.python.agents.crewai.agent",
        "documentation": {}
    },
    {
        "label": "get_api_key",
        "kind": 2,
        "importPath": "samples.python.agents.crewai.agent",
        "description": "samples.python.agents.crewai.agent",
        "peekOfCode": "def get_api_key() -> str:\n  \"\"\"Helper method to handle API Key.\"\"\"\n  load_dotenv()\n  return os.getenv(\"GOOGLE_API_KEY\")\n@tool(\"ImageGenerationTool\")\ndef generate_image_tool(prompt: str, session_id: str, artifact_file_id: str = None) -> str:\n  \"\"\"Image generation tool that generates images or modifies a given image based on a prompt.\"\"\"\n  if not prompt:\n    raise ValueError(\"Prompt cannot be empty\")\n  client = genai.Client(api_key=get_api_key())",
        "detail": "samples.python.agents.crewai.agent",
        "documentation": {}
    },
    {
        "label": "generate_image_tool",
        "kind": 2,
        "importPath": "samples.python.agents.crewai.agent",
        "description": "samples.python.agents.crewai.agent",
        "peekOfCode": "def generate_image_tool(prompt: str, session_id: str, artifact_file_id: str = None) -> str:\n  \"\"\"Image generation tool that generates images or modifies a given image based on a prompt.\"\"\"\n  if not prompt:\n    raise ValueError(\"Prompt cannot be empty\")\n  client = genai.Client(api_key=get_api_key())\n  cache = InMemoryCache()\n  text_input = (\n      prompt,\n      \"Ignore any input images if they do not match the request.\",\n  )",
        "detail": "samples.python.agents.crewai.agent",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "samples.python.agents.crewai.agent",
        "description": "samples.python.agents.crewai.agent",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Imagedata(BaseModel):\n  \"\"\"Represents image data.\n  Attributes:\n    id: Unique identifier for the image.\n    name: Name of the image.\n    mime_type: MIME type of the image.\n    bytes: Base64 encoded image data.\n    error: Error message if there was an issue with the image.\n  \"\"\"",
        "detail": "samples.python.agents.crewai.agent",
        "documentation": {}
    },
    {
        "label": "AgentTaskManager",
        "kind": 6,
        "importPath": "samples.python.agents.crewai.task_manager",
        "description": "samples.python.agents.crewai.task_manager",
        "peekOfCode": "class AgentTaskManager(InMemoryTaskManager):\n  \"\"\"Agent Task Manager, handles task routing and response packing.\"\"\"\n  def __init__(self, agent: ImageGenerationAgent):\n    super().__init__()\n    self.agent = agent\n  async def _stream_generator(\n      self, request: SendTaskRequest\n  ) -> AsyncIterable[SendTaskResponse]:\n    raise NotImplementedError(\"Not implemented\")\n  async def on_send_task(",
        "detail": "samples.python.agents.crewai.task_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "samples.python.agents.crewai.task_manager",
        "description": "samples.python.agents.crewai.task_manager",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass AgentTaskManager(InMemoryTaskManager):\n  \"\"\"Agent Task Manager, handles task routing and response packing.\"\"\"\n  def __init__(self, agent: ImageGenerationAgent):\n    super().__init__()\n    self.agent = agent\n  async def _stream_generator(\n      self, request: SendTaskRequest\n  ) -> AsyncIterable[SendTaskResponse]:\n    raise NotImplementedError(\"Not implemented\")",
        "detail": "samples.python.agents.crewai.task_manager",
        "documentation": {}
    },
    {
        "label": "ReimbursementAgent",
        "kind": 6,
        "importPath": "samples.python.agents.google_adk.agent",
        "description": "samples.python.agents.google_adk.agent",
        "peekOfCode": "class ReimbursementAgent:\n  \"\"\"An agent that handles reimbursement requests.\"\"\"\n  SUPPORTED_CONTENT_TYPES = [\"text\", \"text/plain\"]\n  def __init__(self):\n    self._agent = self._build_agent()\n    self._user_id = \"remote_agent\"\n    self._runner = Runner(\n        app_name=self._agent.name,\n        agent=self._agent,\n        artifact_service=InMemoryArtifactService(),",
        "detail": "samples.python.agents.google_adk.agent",
        "documentation": {}
    },
    {
        "label": "create_request_form",
        "kind": 2,
        "importPath": "samples.python.agents.google_adk.agent",
        "description": "samples.python.agents.google_adk.agent",
        "peekOfCode": "def create_request_form(date: Optional[str] = None, amount: Optional[str] = None, purpose: Optional[str] = None) -> dict[str, Any]:\n  \"\"\"\n   Create a request form for the employee to fill out.\n   Args:\n       date (str): The date of the request. Can be an empty string.\n       amount (str): The requested amount. Can be an empty string.\n       purpose (str): The purpose of the request. Can be an empty string.\n   Returns:\n       dict[str, Any]: A dictionary containing the request form data.\n   \"\"\"",
        "detail": "samples.python.agents.google_adk.agent",
        "documentation": {}
    },
    {
        "label": "return_form",
        "kind": 2,
        "importPath": "samples.python.agents.google_adk.agent",
        "description": "samples.python.agents.google_adk.agent",
        "peekOfCode": "def return_form(\n    form_request: dict[str, Any],    \n    tool_context: ToolContext,\n    instructions: Optional[str] = None) -> dict[str, Any]:\n  \"\"\"\n   Returns a structured json object indicating a form to complete.\n   Args:\n       form_request (dict[str, Any]): The request form data.\n       tool_context (ToolContext): The context in which the tool operates.\n       instructions (str): Instructions for processing the form. Can be an empty string.       ",
        "detail": "samples.python.agents.google_adk.agent",
        "documentation": {}
    },
    {
        "label": "reimburse",
        "kind": 2,
        "importPath": "samples.python.agents.google_adk.agent",
        "description": "samples.python.agents.google_adk.agent",
        "peekOfCode": "def reimburse(request_id: str) -> dict[str, Any]:\n  \"\"\"Reimburse the amount of money to the employee for a given request_id.\"\"\"\n  if request_id not in request_ids:\n    return {\"request_id\": request_id, \"status\": \"Error: Invalid request_id.\"}\n  return {\"request_id\": request_id, \"status\": \"approved\"}\nclass ReimbursementAgent:\n  \"\"\"An agent that handles reimbursement requests.\"\"\"\n  SUPPORTED_CONTENT_TYPES = [\"text\", \"text/plain\"]\n  def __init__(self):\n    self._agent = self._build_agent()",
        "detail": "samples.python.agents.google_adk.agent",
        "documentation": {}
    },
    {
        "label": "request_ids",
        "kind": 5,
        "importPath": "samples.python.agents.google_adk.agent",
        "description": "samples.python.agents.google_adk.agent",
        "peekOfCode": "request_ids = set()\ndef create_request_form(date: Optional[str] = None, amount: Optional[str] = None, purpose: Optional[str] = None) -> dict[str, Any]:\n  \"\"\"\n   Create a request form for the employee to fill out.\n   Args:\n       date (str): The date of the request. Can be an empty string.\n       amount (str): The requested amount. Can be an empty string.\n       purpose (str): The purpose of the request. Can be an empty string.\n   Returns:\n       dict[str, Any]: A dictionary containing the request form data.",
        "detail": "samples.python.agents.google_adk.agent",
        "documentation": {}
    },
    {
        "label": "AgentTaskManager",
        "kind": 6,
        "importPath": "samples.python.agents.google_adk.task_manager",
        "description": "samples.python.agents.google_adk.task_manager",
        "peekOfCode": "class AgentTaskManager(InMemoryTaskManager):\n    def __init__(self, agent: ReimbursementAgent):\n        super().__init__()\n        self.agent = agent\n    async def _stream_generator(\n        self, request: SendTaskStreamingRequest\n    ) -> AsyncIterable[SendTaskStreamingResponse] | JSONRPCResponse:\n        task_send_params: TaskSendParams = request.params\n        query = self._get_user_query(task_send_params)\n        try:",
        "detail": "samples.python.agents.google_adk.task_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "samples.python.agents.google_adk.task_manager",
        "description": "samples.python.agents.google_adk.task_manager",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass AgentTaskManager(InMemoryTaskManager):\n    def __init__(self, agent: ReimbursementAgent):\n        super().__init__()\n        self.agent = agent\n    async def _stream_generator(\n        self, request: SendTaskStreamingRequest\n    ) -> AsyncIterable[SendTaskStreamingResponse] | JSONRPCResponse:\n        task_send_params: TaskSendParams = request.params\n        query = self._get_user_query(task_send_params)",
        "detail": "samples.python.agents.google_adk.task_manager",
        "documentation": {}
    },
    {
        "label": "ResponseFormat",
        "kind": 6,
        "importPath": "samples.python.agents.langgraph.agent",
        "description": "samples.python.agents.langgraph.agent",
        "peekOfCode": "class ResponseFormat(BaseModel):\n    \"\"\"Respond to the user in this format.\"\"\"\n    status: Literal[\"input_required\", \"completed\", \"error\"] = \"input_required\"\n    message: str\nclass CurrencyAgent:\n    SYSTEM_INSTRUCTION = (\n        \"You are a specialized assistant for currency conversions. \"\n        \"Your sole purpose is to use the 'get_exchange_rate' tool to answer questions about currency exchange rates. \"\n        \"If the user asks about anything other than currency conversion or exchange rates, \"\n        \"politely state that you cannot help with that topic and can only assist with currency-related queries. \"",
        "detail": "samples.python.agents.langgraph.agent",
        "documentation": {}
    },
    {
        "label": "CurrencyAgent",
        "kind": 6,
        "importPath": "samples.python.agents.langgraph.agent",
        "description": "samples.python.agents.langgraph.agent",
        "peekOfCode": "class CurrencyAgent:\n    SYSTEM_INSTRUCTION = (\n        \"You are a specialized assistant for currency conversions. \"\n        \"Your sole purpose is to use the 'get_exchange_rate' tool to answer questions about currency exchange rates. \"\n        \"If the user asks about anything other than currency conversion or exchange rates, \"\n        \"politely state that you cannot help with that topic and can only assist with currency-related queries. \"\n        \"Do not attempt to answer unrelated questions or use tools for other purposes.\"\n        \"Set response status to input_required if the user needs to provide more information.\"\n        \"Set response status to error if there is an error while processing the request.\"\n        \"Set response status to completed if the request is complete.\"",
        "detail": "samples.python.agents.langgraph.agent",
        "documentation": {}
    },
    {
        "label": "get_exchange_rate",
        "kind": 2,
        "importPath": "samples.python.agents.langgraph.agent",
        "description": "samples.python.agents.langgraph.agent",
        "peekOfCode": "def get_exchange_rate(\n    currency_from: str = \"USD\",\n    currency_to: str = \"EUR\",\n    currency_date: str = \"latest\",\n):\n    \"\"\"Use this to get current exchange rate.\n    Args:\n        currency_from: The currency to convert from (e.g., \"USD\").\n        currency_to: The currency to convert to (e.g., \"EUR\").\n        currency_date: The date for the exchange rate or \"latest\". Defaults to \"latest\".",
        "detail": "samples.python.agents.langgraph.agent",
        "documentation": {}
    },
    {
        "label": "memory",
        "kind": 5,
        "importPath": "samples.python.agents.langgraph.agent",
        "description": "samples.python.agents.langgraph.agent",
        "peekOfCode": "memory = MemorySaver()\n@tool\ndef get_exchange_rate(\n    currency_from: str = \"USD\",\n    currency_to: str = \"EUR\",\n    currency_date: str = \"latest\",\n):\n    \"\"\"Use this to get current exchange rate.\n    Args:\n        currency_from: The currency to convert from (e.g., \"USD\").",
        "detail": "samples.python.agents.langgraph.agent",
        "documentation": {}
    },
    {
        "label": "AgentTaskManager",
        "kind": 6,
        "importPath": "samples.python.agents.langgraph.task_manager",
        "description": "samples.python.agents.langgraph.task_manager",
        "peekOfCode": "class AgentTaskManager(InMemoryTaskManager):\n    def __init__(self, agent: CurrencyAgent, notification_sender_auth: PushNotificationSenderAuth):\n        super().__init__()\n        self.agent = agent\n        self.notification_sender_auth = notification_sender_auth\n    async def _run_streaming_agent(self, request: SendTaskStreamingRequest):\n        task_send_params: TaskSendParams = request.params\n        query = self._get_user_query(task_send_params)\n        try:\n            async for item in self.agent.stream(query, task_send_params.sessionId):",
        "detail": "samples.python.agents.langgraph.task_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "samples.python.agents.langgraph.task_manager",
        "description": "samples.python.agents.langgraph.task_manager",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass AgentTaskManager(InMemoryTaskManager):\n    def __init__(self, agent: CurrencyAgent, notification_sender_auth: PushNotificationSenderAuth):\n        super().__init__()\n        self.agent = agent\n        self.notification_sender_auth = notification_sender_auth\n    async def _run_streaming_agent(self, request: SendTaskStreamingRequest):\n        task_send_params: TaskSendParams = request.params\n        query = self._get_user_query(task_send_params)\n        try:",
        "detail": "samples.python.agents.langgraph.task_manager",
        "documentation": {}
    },
    {
        "label": "A2ACardResolver",
        "kind": 6,
        "importPath": "samples.python.common.client.card_resolver",
        "description": "samples.python.common.client.card_resolver",
        "peekOfCode": "class A2ACardResolver:\n    def __init__(self, base_url, agent_card_path=\"/.well-known/agent.json\"):\n        self.base_url = base_url.rstrip(\"/\")\n        self.agent_card_path = agent_card_path.lstrip(\"/\")\n    def get_agent_card(self) -> AgentCard:\n        with httpx.Client() as client:\n            response = client.get(self.base_url + \"/\" + self.agent_card_path)\n            response.raise_for_status()\n            try:\n                return AgentCard(**response.json())",
        "detail": "samples.python.common.client.card_resolver",
        "documentation": {}
    },
    {
        "label": "A2AClient",
        "kind": 6,
        "importPath": "samples.python.common.client.client",
        "description": "samples.python.common.client.client",
        "peekOfCode": "class A2AClient:\n    def __init__(self, agent_card: AgentCard = None, url: str = None):\n        if agent_card:\n            self.url = agent_card.url\n        elif url:\n            self.url = url\n        else:\n            raise ValueError(\"Must provide either agent_card or url\")\n    async def send_task(self, payload: dict[str, Any]) -> SendTaskResponse:\n        request = SendTaskRequest(params=payload)",
        "detail": "samples.python.common.client.client",
        "documentation": {}
    },
    {
        "label": "A2AServer",
        "kind": 6,
        "importPath": "samples.python.common.server.server",
        "description": "samples.python.common.server.server",
        "peekOfCode": "class A2AServer:\n    def __init__(\n        self,\n        host=\"0.0.0.0\",\n        port=5000,\n        endpoint=\"/\",\n        agent_card: AgentCard = None,\n        task_manager: TaskManager = None,\n    ):\n        self.host = host",
        "detail": "samples.python.common.server.server",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "samples.python.common.server.server",
        "description": "samples.python.common.server.server",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass A2AServer:\n    def __init__(\n        self,\n        host=\"0.0.0.0\",\n        port=5000,\n        endpoint=\"/\",\n        agent_card: AgentCard = None,\n        task_manager: TaskManager = None,\n    ):",
        "detail": "samples.python.common.server.server",
        "documentation": {}
    },
    {
        "label": "TaskManager",
        "kind": 6,
        "importPath": "samples.python.common.server.task_manager",
        "description": "samples.python.common.server.task_manager",
        "peekOfCode": "class TaskManager(ABC):\n    @abstractmethod\n    async def on_get_task(self, request: GetTaskRequest) -> GetTaskResponse:\n        pass\n    @abstractmethod\n    async def on_cancel_task(self, request: CancelTaskRequest) -> CancelTaskResponse:\n        pass\n    @abstractmethod\n    async def on_send_task(self, request: SendTaskRequest) -> SendTaskResponse:\n        pass",
        "detail": "samples.python.common.server.task_manager",
        "documentation": {}
    },
    {
        "label": "InMemoryTaskManager",
        "kind": 6,
        "importPath": "samples.python.common.server.task_manager",
        "description": "samples.python.common.server.task_manager",
        "peekOfCode": "class InMemoryTaskManager(TaskManager):\n    def __init__(self):\n        self.tasks: dict[str, Task] = {}\n        self.push_notification_infos: dict[str, PushNotificationConfig] = {}\n        self.lock = asyncio.Lock()\n        self.task_sse_subscribers: dict[str, List[asyncio.Queue]] = {}\n        self.subscriber_lock = asyncio.Lock()\n    async def on_get_task(self, request: GetTaskRequest) -> GetTaskResponse:\n        logger.info(f\"Getting task {request.params.id}\")\n        task_query_params: TaskQueryParams = request.params",
        "detail": "samples.python.common.server.task_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "samples.python.common.server.task_manager",
        "description": "samples.python.common.server.task_manager",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass TaskManager(ABC):\n    @abstractmethod\n    async def on_get_task(self, request: GetTaskRequest) -> GetTaskResponse:\n        pass\n    @abstractmethod\n    async def on_cancel_task(self, request: CancelTaskRequest) -> CancelTaskResponse:\n        pass\n    @abstractmethod\n    async def on_send_task(self, request: SendTaskRequest) -> SendTaskResponse:",
        "detail": "samples.python.common.server.task_manager",
        "documentation": {}
    },
    {
        "label": "are_modalities_compatible",
        "kind": 2,
        "importPath": "samples.python.common.server.utils",
        "description": "samples.python.common.server.utils",
        "peekOfCode": "def are_modalities_compatible(\n    server_output_modes: List[str], client_output_modes: List[str]\n):\n    \"\"\"Modalities are compatible if they are both non-empty\n    and there is at least one common element.\"\"\"\n    if client_output_modes is None or len(client_output_modes) == 0:\n        return True\n    if server_output_modes is None or len(server_output_modes) == 0:\n        return True\n    return any(x in server_output_modes for x in client_output_modes)",
        "detail": "samples.python.common.server.utils",
        "documentation": {}
    },
    {
        "label": "new_incompatible_types_error",
        "kind": 2,
        "importPath": "samples.python.common.server.utils",
        "description": "samples.python.common.server.utils",
        "peekOfCode": "def new_incompatible_types_error(request_id):\n    return JSONRPCResponse(id=request_id, error=ContentTypeNotSupportedError())\ndef new_not_implemented_error(request_id):\n    return JSONRPCResponse(id=request_id, error=UnsupportedOperationError())",
        "detail": "samples.python.common.server.utils",
        "documentation": {}
    },
    {
        "label": "new_not_implemented_error",
        "kind": 2,
        "importPath": "samples.python.common.server.utils",
        "description": "samples.python.common.server.utils",
        "peekOfCode": "def new_not_implemented_error(request_id):\n    return JSONRPCResponse(id=request_id, error=UnsupportedOperationError())",
        "detail": "samples.python.common.server.utils",
        "documentation": {}
    },
    {
        "label": "InMemoryCache",
        "kind": 6,
        "importPath": "samples.python.common.utils.in_memory_cache",
        "description": "samples.python.common.utils.in_memory_cache",
        "peekOfCode": "class InMemoryCache:\n    \"\"\"A thread-safe Singleton class to manage cache data.\n    Ensures only one instance of the cache exists across the application.\n    \"\"\"\n    _instance: Optional[\"InMemoryCache\"] = None\n    _lock: threading.Lock = threading.Lock()\n    _initialized: bool = False\n    def __new__(cls):\n        \"\"\"Override __new__ to control instance creation (Singleton pattern).\n        Uses a lock to ensure thread safety during the first instantiation.",
        "detail": "samples.python.common.utils.in_memory_cache",
        "documentation": {}
    },
    {
        "label": "PushNotificationAuth",
        "kind": 6,
        "importPath": "samples.python.common.utils.push_notification_auth",
        "description": "samples.python.common.utils.push_notification_auth",
        "peekOfCode": "class PushNotificationAuth:\n    def _calculate_request_body_sha256(self, data: dict[str, Any]):\n        \"\"\"Calculates the SHA256 hash of a request body.\n        This logic needs to be same for both the agent who signs the payload and the client verifier.\n        \"\"\"\n        body_str = json.dumps(\n            data,\n            ensure_ascii=False,\n            allow_nan=False,\n            indent=None,",
        "detail": "samples.python.common.utils.push_notification_auth",
        "documentation": {}
    },
    {
        "label": "PushNotificationSenderAuth",
        "kind": 6,
        "importPath": "samples.python.common.utils.push_notification_auth",
        "description": "samples.python.common.utils.push_notification_auth",
        "peekOfCode": "class PushNotificationSenderAuth(PushNotificationAuth):\n    def __init__(self):\n        self.public_keys = []\n        self.private_key_jwk: PyJWK = None\n    @staticmethod\n    async def verify_push_notification_url(url: str) -> bool:\n        async with httpx.AsyncClient(timeout=10) as client:\n            try:\n                validation_token = str(uuid.uuid4())\n                response = await client.get(",
        "detail": "samples.python.common.utils.push_notification_auth",
        "documentation": {}
    },
    {
        "label": "PushNotificationReceiverAuth",
        "kind": 6,
        "importPath": "samples.python.common.utils.push_notification_auth",
        "description": "samples.python.common.utils.push_notification_auth",
        "peekOfCode": "class PushNotificationReceiverAuth(PushNotificationAuth):\n    def __init__(self):\n        self.public_keys_jwks = []\n        self.jwks_client = None\n    async def load_jwks(self, jwks_url: str):\n        self.jwks_client = PyJWKClient(jwks_url)\n    async def verify_push_notification(self, request: Request) -> bool:\n        auth_header = request.headers.get(\"Authorization\")\n        if not auth_header or not auth_header.startswith(AUTH_HEADER_PREFIX):\n            print(\"Invalid authorization header\")",
        "detail": "samples.python.common.utils.push_notification_auth",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "samples.python.common.utils.push_notification_auth",
        "description": "samples.python.common.utils.push_notification_auth",
        "peekOfCode": "logger = logging.getLogger(__name__)\nAUTH_HEADER_PREFIX = 'Bearer '\nclass PushNotificationAuth:\n    def _calculate_request_body_sha256(self, data: dict[str, Any]):\n        \"\"\"Calculates the SHA256 hash of a request body.\n        This logic needs to be same for both the agent who signs the payload and the client verifier.\n        \"\"\"\n        body_str = json.dumps(\n            data,\n            ensure_ascii=False,",
        "detail": "samples.python.common.utils.push_notification_auth",
        "documentation": {}
    },
    {
        "label": "AUTH_HEADER_PREFIX",
        "kind": 5,
        "importPath": "samples.python.common.utils.push_notification_auth",
        "description": "samples.python.common.utils.push_notification_auth",
        "peekOfCode": "AUTH_HEADER_PREFIX = 'Bearer '\nclass PushNotificationAuth:\n    def _calculate_request_body_sha256(self, data: dict[str, Any]):\n        \"\"\"Calculates the SHA256 hash of a request body.\n        This logic needs to be same for both the agent who signs the payload and the client verifier.\n        \"\"\"\n        body_str = json.dumps(\n            data,\n            ensure_ascii=False,\n            allow_nan=False,",
        "detail": "samples.python.common.utils.push_notification_auth",
        "documentation": {}
    },
    {
        "label": "TaskState",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class TaskState(str, Enum):\n    SUBMITTED = \"submitted\"\n    WORKING = \"working\"\n    INPUT_REQUIRED = \"input-required\"\n    COMPLETED = \"completed\"\n    CANCELED = \"canceled\"\n    FAILED = \"failed\"\n    UNKNOWN = \"unknown\"\nclass TextPart(BaseModel):\n    type: Literal[\"text\"] = \"text\"",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "TextPart",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class TextPart(BaseModel):\n    type: Literal[\"text\"] = \"text\"\n    text: str\n    metadata: dict[str, Any] | None = None\nclass FileContent(BaseModel):\n    name: str | None = None\n    mimeType: str | None = None\n    bytes: str | None = None\n    uri: str | None = None\n    @model_validator(mode=\"after\")",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "FileContent",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class FileContent(BaseModel):\n    name: str | None = None\n    mimeType: str | None = None\n    bytes: str | None = None\n    uri: str | None = None\n    @model_validator(mode=\"after\")\n    def check_content(self) -> Self:\n        if not (self.bytes or self.uri):\n            raise ValueError(\"Either 'bytes' or 'uri' must be present in the file data\")\n        if self.bytes and self.uri:",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "FilePart",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class FilePart(BaseModel):\n    type: Literal[\"file\"] = \"file\"\n    file: FileContent\n    metadata: dict[str, Any] | None = None\nclass DataPart(BaseModel):\n    type: Literal[\"data\"] = \"data\"\n    data: dict[str, Any]\n    metadata: dict[str, Any] | None = None\nPart = Annotated[Union[TextPart, FilePart, DataPart], Field(discriminator=\"type\")]\nclass Message(BaseModel):",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "DataPart",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class DataPart(BaseModel):\n    type: Literal[\"data\"] = \"data\"\n    data: dict[str, Any]\n    metadata: dict[str, Any] | None = None\nPart = Annotated[Union[TextPart, FilePart, DataPart], Field(discriminator=\"type\")]\nclass Message(BaseModel):\n    role: Literal[\"user\", \"agent\"]\n    parts: List[Part]\n    metadata: dict[str, Any] | None = None\nclass TaskStatus(BaseModel):",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class Message(BaseModel):\n    role: Literal[\"user\", \"agent\"]\n    parts: List[Part]\n    metadata: dict[str, Any] | None = None\nclass TaskStatus(BaseModel):\n    state: TaskState\n    message: Message | None = None\n    timestamp: datetime = Field(default_factory=datetime.now)\n    @field_serializer(\"timestamp\")\n    def serialize_dt(self, dt: datetime, _info):",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatus",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class TaskStatus(BaseModel):\n    state: TaskState\n    message: Message | None = None\n    timestamp: datetime = Field(default_factory=datetime.now)\n    @field_serializer(\"timestamp\")\n    def serialize_dt(self, dt: datetime, _info):\n        return dt.isoformat()\nclass Artifact(BaseModel):\n    name: str | None = None\n    description: str | None = None",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "Artifact",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class Artifact(BaseModel):\n    name: str | None = None\n    description: str | None = None\n    parts: List[Part]\n    metadata: dict[str, Any] | None = None\n    index: int = 0\n    append: bool | None = None\n    lastChunk: bool | None = None\nclass Task(BaseModel):\n    id: str",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class Task(BaseModel):\n    id: str\n    sessionId: str | None = None\n    status: TaskStatus\n    artifacts: List[Artifact] | None = None\n    history: List[Message] | None = None\n    metadata: dict[str, Any] | None = None\nclass TaskStatusUpdateEvent(BaseModel):\n    id: str\n    status: TaskStatus",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "TaskStatusUpdateEvent",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class TaskStatusUpdateEvent(BaseModel):\n    id: str\n    status: TaskStatus\n    final: bool = False\n    metadata: dict[str, Any] | None = None\nclass TaskArtifactUpdateEvent(BaseModel):\n    id: str\n    artifact: Artifact    \n    metadata: dict[str, Any] | None = None\nclass AuthenticationInfo(BaseModel):",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "TaskArtifactUpdateEvent",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class TaskArtifactUpdateEvent(BaseModel):\n    id: str\n    artifact: Artifact    \n    metadata: dict[str, Any] | None = None\nclass AuthenticationInfo(BaseModel):\n    model_config = ConfigDict(extra=\"allow\")\n    schemes: List[str]\n    credentials: str | None = None\nclass PushNotificationConfig(BaseModel):\n    url: str",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "AuthenticationInfo",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class AuthenticationInfo(BaseModel):\n    model_config = ConfigDict(extra=\"allow\")\n    schemes: List[str]\n    credentials: str | None = None\nclass PushNotificationConfig(BaseModel):\n    url: str\n    token: str | None = None\n    authentication: AuthenticationInfo | None = None\nclass TaskIdParams(BaseModel):\n    id: str",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "PushNotificationConfig",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class PushNotificationConfig(BaseModel):\n    url: str\n    token: str | None = None\n    authentication: AuthenticationInfo | None = None\nclass TaskIdParams(BaseModel):\n    id: str\n    metadata: dict[str, Any] | None = None\nclass TaskQueryParams(TaskIdParams):\n    historyLength: int | None = None\nclass TaskSendParams(BaseModel):",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "TaskIdParams",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class TaskIdParams(BaseModel):\n    id: str\n    metadata: dict[str, Any] | None = None\nclass TaskQueryParams(TaskIdParams):\n    historyLength: int | None = None\nclass TaskSendParams(BaseModel):\n    id: str\n    sessionId: str = Field(default_factory=lambda: uuid4().hex)\n    message: Message\n    acceptedOutputModes: Optional[List[str]] = None",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "TaskQueryParams",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class TaskQueryParams(TaskIdParams):\n    historyLength: int | None = None\nclass TaskSendParams(BaseModel):\n    id: str\n    sessionId: str = Field(default_factory=lambda: uuid4().hex)\n    message: Message\n    acceptedOutputModes: Optional[List[str]] = None\n    pushNotification: PushNotificationConfig | None = None\n    historyLength: int | None = None\n    metadata: dict[str, Any] | None = None",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "TaskSendParams",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class TaskSendParams(BaseModel):\n    id: str\n    sessionId: str = Field(default_factory=lambda: uuid4().hex)\n    message: Message\n    acceptedOutputModes: Optional[List[str]] = None\n    pushNotification: PushNotificationConfig | None = None\n    historyLength: int | None = None\n    metadata: dict[str, Any] | None = None\nclass TaskPushNotificationConfig(BaseModel):\n    id: str",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "TaskPushNotificationConfig",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class TaskPushNotificationConfig(BaseModel):\n    id: str\n    pushNotificationConfig: PushNotificationConfig\n## RPC Messages\nclass JSONRPCMessage(BaseModel):\n    jsonrpc: Literal[\"2.0\"] = \"2.0\"\n    id: int | str | None = Field(default_factory=lambda: uuid4().hex)\nclass JSONRPCRequest(JSONRPCMessage):\n    method: str\n    params: dict[str, Any] | None = None",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCMessage",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class JSONRPCMessage(BaseModel):\n    jsonrpc: Literal[\"2.0\"] = \"2.0\"\n    id: int | str | None = Field(default_factory=lambda: uuid4().hex)\nclass JSONRPCRequest(JSONRPCMessage):\n    method: str\n    params: dict[str, Any] | None = None\nclass JSONRPCError(BaseModel):\n    code: int\n    message: str\n    data: Any | None = None",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCRequest",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class JSONRPCRequest(JSONRPCMessage):\n    method: str\n    params: dict[str, Any] | None = None\nclass JSONRPCError(BaseModel):\n    code: int\n    message: str\n    data: Any | None = None\nclass JSONRPCResponse(JSONRPCMessage):\n    result: Any | None = None\n    error: JSONRPCError | None = None",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class JSONRPCError(BaseModel):\n    code: int\n    message: str\n    data: Any | None = None\nclass JSONRPCResponse(JSONRPCMessage):\n    result: Any | None = None\n    error: JSONRPCError | None = None\nclass SendTaskRequest(JSONRPCRequest):\n    method: Literal[\"tasks/send\"] = \"tasks/send\"\n    params: TaskSendParams",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "JSONRPCResponse",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class JSONRPCResponse(JSONRPCMessage):\n    result: Any | None = None\n    error: JSONRPCError | None = None\nclass SendTaskRequest(JSONRPCRequest):\n    method: Literal[\"tasks/send\"] = \"tasks/send\"\n    params: TaskSendParams\nclass SendTaskResponse(JSONRPCResponse):\n    result: Task | None = None\nclass SendTaskStreamingRequest(JSONRPCRequest):\n    method: Literal[\"tasks/sendSubscribe\"] = \"tasks/sendSubscribe\"",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskRequest",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class SendTaskRequest(JSONRPCRequest):\n    method: Literal[\"tasks/send\"] = \"tasks/send\"\n    params: TaskSendParams\nclass SendTaskResponse(JSONRPCResponse):\n    result: Task | None = None\nclass SendTaskStreamingRequest(JSONRPCRequest):\n    method: Literal[\"tasks/sendSubscribe\"] = \"tasks/sendSubscribe\"\n    params: TaskSendParams\nclass SendTaskStreamingResponse(JSONRPCResponse):\n    result: TaskStatusUpdateEvent | TaskArtifactUpdateEvent | None = None",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskResponse",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class SendTaskResponse(JSONRPCResponse):\n    result: Task | None = None\nclass SendTaskStreamingRequest(JSONRPCRequest):\n    method: Literal[\"tasks/sendSubscribe\"] = \"tasks/sendSubscribe\"\n    params: TaskSendParams\nclass SendTaskStreamingResponse(JSONRPCResponse):\n    result: TaskStatusUpdateEvent | TaskArtifactUpdateEvent | None = None\nclass GetTaskRequest(JSONRPCRequest):\n    method: Literal[\"tasks/get\"] = \"tasks/get\"\n    params: TaskQueryParams",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingRequest",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class SendTaskStreamingRequest(JSONRPCRequest):\n    method: Literal[\"tasks/sendSubscribe\"] = \"tasks/sendSubscribe\"\n    params: TaskSendParams\nclass SendTaskStreamingResponse(JSONRPCResponse):\n    result: TaskStatusUpdateEvent | TaskArtifactUpdateEvent | None = None\nclass GetTaskRequest(JSONRPCRequest):\n    method: Literal[\"tasks/get\"] = \"tasks/get\"\n    params: TaskQueryParams\nclass GetTaskResponse(JSONRPCResponse):\n    result: Task | None = None",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "SendTaskStreamingResponse",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class SendTaskStreamingResponse(JSONRPCResponse):\n    result: TaskStatusUpdateEvent | TaskArtifactUpdateEvent | None = None\nclass GetTaskRequest(JSONRPCRequest):\n    method: Literal[\"tasks/get\"] = \"tasks/get\"\n    params: TaskQueryParams\nclass GetTaskResponse(JSONRPCResponse):\n    result: Task | None = None\nclass CancelTaskRequest(JSONRPCRequest):\n    method: Literal[\"tasks/cancel\",] = \"tasks/cancel\"\n    params: TaskIdParams",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskRequest",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class GetTaskRequest(JSONRPCRequest):\n    method: Literal[\"tasks/get\"] = \"tasks/get\"\n    params: TaskQueryParams\nclass GetTaskResponse(JSONRPCResponse):\n    result: Task | None = None\nclass CancelTaskRequest(JSONRPCRequest):\n    method: Literal[\"tasks/cancel\",] = \"tasks/cancel\"\n    params: TaskIdParams\nclass CancelTaskResponse(JSONRPCResponse):\n    result: Task | None = None",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskResponse",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class GetTaskResponse(JSONRPCResponse):\n    result: Task | None = None\nclass CancelTaskRequest(JSONRPCRequest):\n    method: Literal[\"tasks/cancel\",] = \"tasks/cancel\"\n    params: TaskIdParams\nclass CancelTaskResponse(JSONRPCResponse):\n    result: Task | None = None\nclass SetTaskPushNotificationRequest(JSONRPCRequest):\n    method: Literal[\"tasks/pushNotification/set\",] = \"tasks/pushNotification/set\"\n    params: TaskPushNotificationConfig",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "CancelTaskRequest",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class CancelTaskRequest(JSONRPCRequest):\n    method: Literal[\"tasks/cancel\",] = \"tasks/cancel\"\n    params: TaskIdParams\nclass CancelTaskResponse(JSONRPCResponse):\n    result: Task | None = None\nclass SetTaskPushNotificationRequest(JSONRPCRequest):\n    method: Literal[\"tasks/pushNotification/set\",] = \"tasks/pushNotification/set\"\n    params: TaskPushNotificationConfig\nclass SetTaskPushNotificationResponse(JSONRPCResponse):\n    result: TaskPushNotificationConfig | None = None",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "CancelTaskResponse",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class CancelTaskResponse(JSONRPCResponse):\n    result: Task | None = None\nclass SetTaskPushNotificationRequest(JSONRPCRequest):\n    method: Literal[\"tasks/pushNotification/set\",] = \"tasks/pushNotification/set\"\n    params: TaskPushNotificationConfig\nclass SetTaskPushNotificationResponse(JSONRPCResponse):\n    result: TaskPushNotificationConfig | None = None\nclass GetTaskPushNotificationRequest(JSONRPCRequest):\n    method: Literal[\"tasks/pushNotification/get\",] = \"tasks/pushNotification/get\"\n    params: TaskIdParams",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "SetTaskPushNotificationRequest",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class SetTaskPushNotificationRequest(JSONRPCRequest):\n    method: Literal[\"tasks/pushNotification/set\",] = \"tasks/pushNotification/set\"\n    params: TaskPushNotificationConfig\nclass SetTaskPushNotificationResponse(JSONRPCResponse):\n    result: TaskPushNotificationConfig | None = None\nclass GetTaskPushNotificationRequest(JSONRPCRequest):\n    method: Literal[\"tasks/pushNotification/get\",] = \"tasks/pushNotification/get\"\n    params: TaskIdParams\nclass GetTaskPushNotificationResponse(JSONRPCResponse):\n    result: TaskPushNotificationConfig | None = None",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "SetTaskPushNotificationResponse",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class SetTaskPushNotificationResponse(JSONRPCResponse):\n    result: TaskPushNotificationConfig | None = None\nclass GetTaskPushNotificationRequest(JSONRPCRequest):\n    method: Literal[\"tasks/pushNotification/get\",] = \"tasks/pushNotification/get\"\n    params: TaskIdParams\nclass GetTaskPushNotificationResponse(JSONRPCResponse):\n    result: TaskPushNotificationConfig | None = None\nclass TaskResubscriptionRequest(JSONRPCRequest):\n    method: Literal[\"tasks/resubscribe\",] = \"tasks/resubscribe\"\n    params: TaskIdParams",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskPushNotificationRequest",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class GetTaskPushNotificationRequest(JSONRPCRequest):\n    method: Literal[\"tasks/pushNotification/get\",] = \"tasks/pushNotification/get\"\n    params: TaskIdParams\nclass GetTaskPushNotificationResponse(JSONRPCResponse):\n    result: TaskPushNotificationConfig | None = None\nclass TaskResubscriptionRequest(JSONRPCRequest):\n    method: Literal[\"tasks/resubscribe\",] = \"tasks/resubscribe\"\n    params: TaskIdParams\nA2ARequest = TypeAdapter(\n    Annotated[",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "GetTaskPushNotificationResponse",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class GetTaskPushNotificationResponse(JSONRPCResponse):\n    result: TaskPushNotificationConfig | None = None\nclass TaskResubscriptionRequest(JSONRPCRequest):\n    method: Literal[\"tasks/resubscribe\",] = \"tasks/resubscribe\"\n    params: TaskIdParams\nA2ARequest = TypeAdapter(\n    Annotated[\n        Union[\n            SendTaskRequest,\n            GetTaskRequest,",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "TaskResubscriptionRequest",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class TaskResubscriptionRequest(JSONRPCRequest):\n    method: Literal[\"tasks/resubscribe\",] = \"tasks/resubscribe\"\n    params: TaskIdParams\nA2ARequest = TypeAdapter(\n    Annotated[\n        Union[\n            SendTaskRequest,\n            GetTaskRequest,\n            CancelTaskRequest,\n            SetTaskPushNotificationRequest,",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "JSONParseError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class JSONParseError(JSONRPCError):\n    code: int = -32700\n    message: str = \"Invalid JSON payload\"\n    data: Any | None = None\nclass InvalidRequestError(JSONRPCError):\n    code: int = -32600\n    message: str = \"Request payload validation error\"\n    data: Any | None = None\nclass MethodNotFoundError(JSONRPCError):\n    code: int = -32601",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "InvalidRequestError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class InvalidRequestError(JSONRPCError):\n    code: int = -32600\n    message: str = \"Request payload validation error\"\n    data: Any | None = None\nclass MethodNotFoundError(JSONRPCError):\n    code: int = -32601\n    message: str = \"Method not found\"\n    data: None = None\nclass InvalidParamsError(JSONRPCError):\n    code: int = -32602",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "MethodNotFoundError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class MethodNotFoundError(JSONRPCError):\n    code: int = -32601\n    message: str = \"Method not found\"\n    data: None = None\nclass InvalidParamsError(JSONRPCError):\n    code: int = -32602\n    message: str = \"Invalid parameters\"\n    data: Any | None = None\nclass InternalError(JSONRPCError):\n    code: int = -32603",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "InvalidParamsError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class InvalidParamsError(JSONRPCError):\n    code: int = -32602\n    message: str = \"Invalid parameters\"\n    data: Any | None = None\nclass InternalError(JSONRPCError):\n    code: int = -32603\n    message: str = \"Internal error\"\n    data: Any | None = None\nclass TaskNotFoundError(JSONRPCError):\n    code: int = -32001",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "InternalError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class InternalError(JSONRPCError):\n    code: int = -32603\n    message: str = \"Internal error\"\n    data: Any | None = None\nclass TaskNotFoundError(JSONRPCError):\n    code: int = -32001\n    message: str = \"Task not found\"\n    data: None = None\nclass TaskNotCancelableError(JSONRPCError):\n    code: int = -32002",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "TaskNotFoundError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class TaskNotFoundError(JSONRPCError):\n    code: int = -32001\n    message: str = \"Task not found\"\n    data: None = None\nclass TaskNotCancelableError(JSONRPCError):\n    code: int = -32002\n    message: str = \"Task cannot be canceled\"\n    data: None = None\nclass PushNotificationNotSupportedError(JSONRPCError):\n    code: int = -32003",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "TaskNotCancelableError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class TaskNotCancelableError(JSONRPCError):\n    code: int = -32002\n    message: str = \"Task cannot be canceled\"\n    data: None = None\nclass PushNotificationNotSupportedError(JSONRPCError):\n    code: int = -32003\n    message: str = \"Push Notification is not supported\"\n    data: None = None\nclass UnsupportedOperationError(JSONRPCError):\n    code: int = -32004",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "PushNotificationNotSupportedError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class PushNotificationNotSupportedError(JSONRPCError):\n    code: int = -32003\n    message: str = \"Push Notification is not supported\"\n    data: None = None\nclass UnsupportedOperationError(JSONRPCError):\n    code: int = -32004\n    message: str = \"This operation is not supported\"\n    data: None = None\nclass ContentTypeNotSupportedError(JSONRPCError):\n    code: int = -32005",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "UnsupportedOperationError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class UnsupportedOperationError(JSONRPCError):\n    code: int = -32004\n    message: str = \"This operation is not supported\"\n    data: None = None\nclass ContentTypeNotSupportedError(JSONRPCError):\n    code: int = -32005\n    message: str = \"Incompatible content types\"\n    data: None = None\nclass AgentProvider(BaseModel):\n    organization: str",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "ContentTypeNotSupportedError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class ContentTypeNotSupportedError(JSONRPCError):\n    code: int = -32005\n    message: str = \"Incompatible content types\"\n    data: None = None\nclass AgentProvider(BaseModel):\n    organization: str\n    url: str | None = None\nclass AgentCapabilities(BaseModel):\n    streaming: bool = False\n    pushNotifications: bool = False",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "AgentProvider",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class AgentProvider(BaseModel):\n    organization: str\n    url: str | None = None\nclass AgentCapabilities(BaseModel):\n    streaming: bool = False\n    pushNotifications: bool = False\n    stateTransitionHistory: bool = False\nclass AgentAuthentication(BaseModel):\n    schemes: List[str]\n    credentials: str | None = None",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "AgentCapabilities",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class AgentCapabilities(BaseModel):\n    streaming: bool = False\n    pushNotifications: bool = False\n    stateTransitionHistory: bool = False\nclass AgentAuthentication(BaseModel):\n    schemes: List[str]\n    credentials: str | None = None\nclass AgentSkill(BaseModel):\n    id: str\n    name: str",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "AgentAuthentication",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class AgentAuthentication(BaseModel):\n    schemes: List[str]\n    credentials: str | None = None\nclass AgentSkill(BaseModel):\n    id: str\n    name: str\n    description: str | None = None\n    tags: List[str] | None = None\n    examples: List[str] | None = None\n    inputModes: List[str] | None = None",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "AgentSkill",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class AgentSkill(BaseModel):\n    id: str\n    name: str\n    description: str | None = None\n    tags: List[str] | None = None\n    examples: List[str] | None = None\n    inputModes: List[str] | None = None\n    outputModes: List[str] | None = None\nclass AgentCard(BaseModel):\n    name: str",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "AgentCard",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class AgentCard(BaseModel):\n    name: str\n    description: str | None = None\n    url: str\n    provider: AgentProvider | None = None\n    version: str\n    documentationUrl: str | None = None\n    capabilities: AgentCapabilities\n    authentication: AgentAuthentication | None = None\n    defaultInputModes: List[str] = [\"text\"]",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "A2AClientError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class A2AClientError(Exception):\n    pass\nclass A2AClientHTTPError(A2AClientError):\n    def __init__(self, status_code: int, message: str):\n        self.status_code = status_code\n        self.message = message\n        super().__init__(f\"HTTP Error {status_code}: {message}\")\nclass A2AClientJSONError(A2AClientError):\n    def __init__(self, message: str):\n        self.message = message",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "A2AClientHTTPError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class A2AClientHTTPError(A2AClientError):\n    def __init__(self, status_code: int, message: str):\n        self.status_code = status_code\n        self.message = message\n        super().__init__(f\"HTTP Error {status_code}: {message}\")\nclass A2AClientJSONError(A2AClientError):\n    def __init__(self, message: str):\n        self.message = message\n        super().__init__(f\"JSON Error: {message}\")\nclass MissingAPIKeyError(Exception):",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "A2AClientJSONError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class A2AClientJSONError(A2AClientError):\n    def __init__(self, message: str):\n        self.message = message\n        super().__init__(f\"JSON Error: {message}\")\nclass MissingAPIKeyError(Exception):\n    \"\"\"Exception for missing API key.\"\"\"\n    pass",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "MissingAPIKeyError",
        "kind": 6,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "class MissingAPIKeyError(Exception):\n    \"\"\"Exception for missing API key.\"\"\"\n    pass",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "Part",
        "kind": 5,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "Part = Annotated[Union[TextPart, FilePart, DataPart], Field(discriminator=\"type\")]\nclass Message(BaseModel):\n    role: Literal[\"user\", \"agent\"]\n    parts: List[Part]\n    metadata: dict[str, Any] | None = None\nclass TaskStatus(BaseModel):\n    state: TaskState\n    message: Message | None = None\n    timestamp: datetime = Field(default_factory=datetime.now)\n    @field_serializer(\"timestamp\")",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "A2ARequest",
        "kind": 5,
        "importPath": "samples.python.common.types",
        "description": "samples.python.common.types",
        "peekOfCode": "A2ARequest = TypeAdapter(\n    Annotated[\n        Union[\n            SendTaskRequest,\n            GetTaskRequest,\n            CancelTaskRequest,\n            SetTaskPushNotificationRequest,\n            GetTaskPushNotificationRequest,\n            TaskResubscriptionRequest,\n            SendTaskStreamingRequest,",
        "detail": "samples.python.common.types",
        "documentation": {}
    },
    {
        "label": "PushNotificationListener",
        "kind": 6,
        "importPath": "samples.python.hosts.cli.push_notification_listener",
        "description": "samples.python.hosts.cli.push_notification_listener",
        "peekOfCode": "class PushNotificationListener():\n    def __init__(self, host, port, notification_receiver_auth: PushNotificationReceiverAuth):\n        self.host = host\n        self.port = port\n        self.notification_receiver_auth = notification_receiver_auth\n        self.loop = asyncio.new_event_loop()\n        self.thread = threading.Thread(\n            target=lambda loop: loop.run_forever(), args=(self.loop,)\n        )\n        self.thread.daemon = True",
        "detail": "samples.python.hosts.cli.push_notification_listener",
        "documentation": {}
    },
    {
        "label": "root_agent",
        "kind": 5,
        "importPath": "samples.python.hosts.multiagent.agent",
        "description": "samples.python.hosts.multiagent.agent",
        "peekOfCode": "root_agent = HostAgent([\"http://localhost:10000\"]).create_agent()",
        "detail": "samples.python.hosts.multiagent.agent",
        "documentation": {}
    },
    {
        "label": "HostAgent",
        "kind": 6,
        "importPath": "samples.python.hosts.multiagent.host_agent",
        "description": "samples.python.hosts.multiagent.host_agent",
        "peekOfCode": "class HostAgent:\n  \"\"\"The host agent.\n  This is the agent responsible for choosing which remote agents to send\n  tasks to and coordinate their work.\n  \"\"\"\n  def __init__(\n      self,\n      remote_agent_addresses: List[str],\n      task_callback: TaskUpdateCallback | None = None\n  ):",
        "detail": "samples.python.hosts.multiagent.host_agent",
        "documentation": {}
    },
    {
        "label": "convert_parts",
        "kind": 2,
        "importPath": "samples.python.hosts.multiagent.host_agent",
        "description": "samples.python.hosts.multiagent.host_agent",
        "peekOfCode": "def convert_parts(parts: list[Part], tool_context: ToolContext):\n  rval = []\n  for p in parts:\n    rval.append(convert_part(p, tool_context))\n  return rval\ndef convert_part(part: Part, tool_context: ToolContext):\n  if part.type == \"text\":\n    return part.text\n  elif part.type == \"data\":\n    return part.data",
        "detail": "samples.python.hosts.multiagent.host_agent",
        "documentation": {}
    },
    {
        "label": "convert_part",
        "kind": 2,
        "importPath": "samples.python.hosts.multiagent.host_agent",
        "description": "samples.python.hosts.multiagent.host_agent",
        "peekOfCode": "def convert_part(part: Part, tool_context: ToolContext):\n  if part.type == \"text\":\n    return part.text\n  elif part.type == \"data\":\n    return part.data\n  elif part.type == \"file\":\n    # Repackage A2A FilePart to google.genai Blob\n    # Currently not considering plain text as files    \n    file_id = part.file.name\n    file_bytes = base64.b64decode(part.file.bytes)    ",
        "detail": "samples.python.hosts.multiagent.host_agent",
        "documentation": {}
    },
    {
        "label": "RemoteAgentConnections",
        "kind": 6,
        "importPath": "samples.python.hosts.multiagent.remote_agent_connection",
        "description": "samples.python.hosts.multiagent.remote_agent_connection",
        "peekOfCode": "class RemoteAgentConnections:\n  \"\"\"A class to hold the connections to the remote agents.\"\"\"\n  def __init__(self, agent_card: AgentCard):\n    self.agent_client = A2AClient(agent_card)\n    self.card = agent_card\n    self.conversation_name = None\n    self.conversation = None\n    self.pending_tasks = set()\n  def get_agent(self) -> AgentCard:\n    return self.card",
        "detail": "samples.python.hosts.multiagent.remote_agent_connection",
        "documentation": {}
    },
    {
        "label": "merge_metadata",
        "kind": 2,
        "importPath": "samples.python.hosts.multiagent.remote_agent_connection",
        "description": "samples.python.hosts.multiagent.remote_agent_connection",
        "peekOfCode": "def merge_metadata(target, source):\n  if not hasattr(target, 'metadata') or not hasattr(source, 'metadata'):\n    return\n  if target.metadata and source.metadata:\n    target.metadata.update(source.metadata)\n  elif source.metadata:\n    target.metadata = dict(**source.metadata)",
        "detail": "samples.python.hosts.multiagent.remote_agent_connection",
        "documentation": {}
    },
    {
        "label": "TaskCallbackArg",
        "kind": 5,
        "importPath": "samples.python.hosts.multiagent.remote_agent_connection",
        "description": "samples.python.hosts.multiagent.remote_agent_connection",
        "peekOfCode": "TaskCallbackArg = Task | TaskStatusUpdateEvent | TaskArtifactUpdateEvent\nTaskUpdateCallback = Callable[[TaskCallbackArg], Task]\nclass RemoteAgentConnections:\n  \"\"\"A class to hold the connections to the remote agents.\"\"\"\n  def __init__(self, agent_card: AgentCard):\n    self.agent_client = A2AClient(agent_card)\n    self.card = agent_card\n    self.conversation_name = None\n    self.conversation = None\n    self.pending_tasks = set()",
        "detail": "samples.python.hosts.multiagent.remote_agent_connection",
        "documentation": {}
    },
    {
        "label": "TaskUpdateCallback",
        "kind": 5,
        "importPath": "samples.python.hosts.multiagent.remote_agent_connection",
        "description": "samples.python.hosts.multiagent.remote_agent_connection",
        "peekOfCode": "TaskUpdateCallback = Callable[[TaskCallbackArg], Task]\nclass RemoteAgentConnections:\n  \"\"\"A class to hold the connections to the remote agents.\"\"\"\n  def __init__(self, agent_card: AgentCard):\n    self.agent_client = A2AClient(agent_card)\n    self.card = agent_card\n    self.conversation_name = None\n    self.conversation = None\n    self.pending_tasks = set()\n  def get_agent(self) -> AgentCard:",
        "detail": "samples.python.hosts.multiagent.remote_agent_connection",
        "documentation": {}
    },
    {
        "label": "TestTaskManager",
        "kind": 6,
        "importPath": "tests.common.test_task_manager",
        "description": "tests.common.test_task_manager",
        "peekOfCode": "class TestTaskManager(InMemoryTaskManager):\n    __test__ = False\n    def __init__(self):\n        super().__init__()\n    async def on_send_task(self, request: SendTaskRequest) -> SendTaskResponse:\n        pass\n    async def on_send_task_subscribe(\n        self, request: SendTaskStreamingRequest\n    ) -> Union[AsyncIterable[SendTaskStreamingResponse], JSONRPCResponse]:\n        pass",
        "detail": "tests.common.test_task_manager",
        "documentation": {}
    },
    {
        "label": "TestInMemoryTaskManager",
        "kind": 6,
        "importPath": "tests.common.test_task_manager",
        "description": "tests.common.test_task_manager",
        "peekOfCode": "class TestInMemoryTaskManager(unittest.IsolatedAsyncioTestCase):\n    async def asyncSetUp(self):\n        self.task_manager = TestTaskManager()\n    def get_test_message(self, role=\"agent\", text=\"Test Message\"):\n        return Message(role=role, parts=[TextPart(text=text)])\n    async def test_on_get_task_success(self):\n        task_id = \"test_task\"\n        task = Task(\n            id=task_id,\n            messages=[self.get_test_message()],",
        "detail": "tests.common.test_task_manager",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def schema():\n    \"\"\"Provides the loaded JSON schema from schema.json.\"\"\"\n    if not SCHEMA_FILE.is_file():\n        pytest.fail(f\"Schema file not found at {SCHEMA_FILE.resolve()}\")\n    try:\n        with open(SCHEMA_FILE, 'r', encoding='utf-8') as f:\n            return json.load(f)\n    except json.JSONDecodeError as e:\n        pytest.fail(f\"Error decoding JSON from {SCHEMA_FILE.resolve()}: {e}\")\n    except Exception as e:",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "resolver",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def resolver(schema):\n    \"\"\"Provides a resolver for the loaded schema.\"\"\"\n    return RefResolver.from_schema(schema)\n# --- Helper Functions ---\ndef validate_instance(instance_data, definition_name, schema, resolver):\n    \"\"\"Helper function to validate instance data against a specific definition.\"\"\"\n    definition_schema = schema[\"$defs\"].get(definition_name)\n    assert definition_schema is not None, f\"Definition {definition_name} not found in schema\"\n    try:\n        # Validate the instance against its specific definition, providing the resolver",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "validate_instance",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def validate_instance(instance_data, definition_name, schema, resolver):\n    \"\"\"Helper function to validate instance data against a specific definition.\"\"\"\n    definition_schema = schema[\"$defs\"].get(definition_name)\n    assert definition_schema is not None, f\"Definition {definition_name} not found in schema\"\n    try:\n        # Validate the instance against its specific definition, providing the resolver\n        validate(instance=instance_data, schema=definition_schema, resolver=resolver, format_checker=Draft7Validator.FORMAT_CHECKER)\n    except ValidationError as e:\n        # Use pytest.fail for better error reporting in pytest\n        pytest.fail(f\"Validation failed for {definition_name} with data:\\n{json.dumps(instance_data, indent=2)}\\nSchema Path: {e.schema_path}\\nInstance Path: {e.path}\\nValidator: {e.validator} = {e.validator_value}\\nError: {e.message}\")",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_text_part",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_text_part(schema, resolver):\n    instance = TextPart(text=\"Hello world\", metadata={\"source\": \"user\"})\n    validate_instance(instance.model_dump(mode='json'), \"TextPart\", schema, resolver)\n    instance_minimal = TextPart(text=\"Minimal\")\n    validate_instance(instance_minimal.model_dump(mode='json'), \"TextPart\", schema, resolver)\ndef test_file_content(schema, resolver):\n    instance_bytes = FileContent(name=\"test.bin\", mimeType=\"application/octet-stream\", bytes=\"YWFh\") # \"aaa\" in base64\n    validate_instance(instance_bytes.model_dump(mode='json'), \"FileContent\", schema, resolver)\n    instance_uri = FileContent(name=\"test.txt\", uri=\"file:///tmp/test.txt\")\n    validate_instance(instance_uri.model_dump(mode='json'), \"FileContent\", schema, resolver)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_file_content",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_file_content(schema, resolver):\n    instance_bytes = FileContent(name=\"test.bin\", mimeType=\"application/octet-stream\", bytes=\"YWFh\") # \"aaa\" in base64\n    validate_instance(instance_bytes.model_dump(mode='json'), \"FileContent\", schema, resolver)\n    instance_uri = FileContent(name=\"test.txt\", uri=\"file:///tmp/test.txt\")\n    validate_instance(instance_uri.model_dump(mode='json'), \"FileContent\", schema, resolver)\ndef test_file_part(schema, resolver):\n    file_content = FileContent(uri=\"data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==\")\n    instance = FilePart(file=file_content, metadata={\"encoding\": \"base64\"})\n    validate_instance(instance.model_dump(mode='json'), \"FilePart\", schema, resolver)\ndef test_data_part(schema, resolver):",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_file_part",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_file_part(schema, resolver):\n    file_content = FileContent(uri=\"data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==\")\n    instance = FilePart(file=file_content, metadata={\"encoding\": \"base64\"})\n    validate_instance(instance.model_dump(mode='json'), \"FilePart\", schema, resolver)\ndef test_data_part(schema, resolver):\n    instance = DataPart(data={\"key\": \"value\", \"number\": 123, \"bool\": True}, metadata={\"origin\": \"system\"})\n    validate_instance(instance.model_dump(mode='json'), \"DataPart\", schema, resolver)\n# --- Composite Types ---\ndef test_message(schema, resolver):\n    text_part = TextPart(text=\"Query\")",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_data_part",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_data_part(schema, resolver):\n    instance = DataPart(data={\"key\": \"value\", \"number\": 123, \"bool\": True}, metadata={\"origin\": \"system\"})\n    validate_instance(instance.model_dump(mode='json'), \"DataPart\", schema, resolver)\n# --- Composite Types ---\ndef test_message(schema, resolver):\n    text_part = TextPart(text=\"Query\")\n    file_part = FilePart(file=FileContent(bytes=\"YWFh\"))\n    data_part = DataPart(data={\"param\": 1})\n    instance_user = Message(role=\"user\", parts=[text_part])\n    validate_instance(instance_user.model_dump(mode='json'), \"Message\", schema, resolver)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_message",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_message(schema, resolver):\n    text_part = TextPart(text=\"Query\")\n    file_part = FilePart(file=FileContent(bytes=\"YWFh\"))\n    data_part = DataPart(data={\"param\": 1})\n    instance_user = Message(role=\"user\", parts=[text_part])\n    validate_instance(instance_user.model_dump(mode='json'), \"Message\", schema, resolver)\n    instance_agent = Message(\n        role=\"agent\",\n        parts=[text_part, file_part, data_part],\n        metadata={\"timestamp\": datetime.now().isoformat()}",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_task_status",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_task_status(schema, resolver):\n    ts = datetime.now()\n    instance = TaskStatus(state=TaskState.WORKING, message=Message(role=\"agent\", parts=[TextPart(text=\"Processing...\")]))\n    dumped_data = instance.model_dump(mode='json')\n    assert \"timestamp\" in dumped_data\n    validate_instance(dumped_data, \"TaskStatus\", schema, resolver)\n    instance_completed = TaskStatus(state=TaskState.COMPLETED, timestamp=ts)\n    dumped_completed = instance_completed.model_dump(mode='json')\n    assert dumped_completed[\"timestamp\"] == ts.isoformat() # Check serializer\n    validate_instance(dumped_completed, \"TaskStatus\", schema, resolver)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_artifact",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_artifact(schema, resolver):\n    instance = Artifact(\n        name=\"result.txt\",\n        description=\"Final output\",\n        parts=[TextPart(text=\"Done\")],\n        metadata={\"generated_by\": \"processor\"}\n    )\n    validate_instance(instance.model_dump(mode='json'), \"Artifact\", schema, resolver)\n    instance_minimal = Artifact(parts=[DataPart(data={\"status\": \"ok\"})])\n    validate_instance(instance_minimal.model_dump(mode='json'), \"Artifact\", schema, resolver)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_task",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_task(schema, resolver):\n    status = TaskStatus(state=TaskState.COMPLETED)\n    artifact = Artifact(parts=[TextPart(text=\"Result\")])\n    instance = Task(\n        id=uuid4().hex,\n        sessionId=uuid4().hex,\n        status=status,\n        artifacts=[artifact],\n        metadata={\"user_id\": 123}\n    )",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_task_status_update_event",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_task_status_update_event(schema, resolver):\n    status = TaskStatus(state=TaskState.WORKING)\n    instance = TaskStatusUpdateEvent(\n        id=uuid4().hex,\n        status=status,\n        final=False,\n        metadata={\"update_seq\": 1}\n    )\n    validate_instance(instance.model_dump(mode='json'), \"TaskStatusUpdateEvent\", schema, resolver)\n    instance_final = TaskStatusUpdateEvent(id=uuid4().hex, status=TaskStatus(state=TaskState.FAILED), final=True)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_task_artifact_update_event",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_task_artifact_update_event(schema, resolver):\n    artifact =Artifact(\n        name=\"result.txt\",\n        description=\"Final output\",\n        parts=[TextPart(text=\"Done\")],\n        metadata={\"generated_by\": \"processor\"}\n    )\n    instance = TaskArtifactUpdateEvent(\n        id=uuid4().hex,\n        artifact=artifact,",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_authentication_info",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_authentication_info(schema, resolver):\n    instance = AuthenticationInfo(schemes=[\"bearer\"], credentials=\"token123\")\n    validate_instance(instance.model_dump(mode='json'), \"AuthenticationInfo\", schema, resolver)\n    # Test extra fields allowed by schema (additionalProperties: {})\n    instance_extra = AuthenticationInfo(schemes=[\"basic\"], extra_field=\"some_value\")\n    validate_instance(instance_extra.model_dump(mode='json'), \"AuthenticationInfo\", schema, resolver)\ndef test_push_notification_config(schema, resolver):\n    auth = AuthenticationInfo(schemes=[\"bearer\"], credentials=\"abc\")\n    instance = PushNotificationConfig(url=\"https://example.com/callback\", token=\"secret\", authentication=auth)\n    validate_instance(instance.model_dump(mode='json'), \"PushNotificationConfig\", schema, resolver)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_push_notification_config",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_push_notification_config(schema, resolver):\n    auth = AuthenticationInfo(schemes=[\"bearer\"], credentials=\"abc\")\n    instance = PushNotificationConfig(url=\"https://example.com/callback\", token=\"secret\", authentication=auth)\n    validate_instance(instance.model_dump(mode='json'), \"PushNotificationConfig\", schema, resolver)\n    instance_no_auth = PushNotificationConfig(url=\"http://localhost/notify\", token=\"simple\")\n    validate_instance(instance_no_auth.model_dump(mode='json'), \"PushNotificationConfig\", schema, resolver)\ndef test_task_query_params(schema, resolver):\n    instance = TaskQueryParams(id=uuid4().hex, metadata={\"filter\": \"active\"})\n    validate_instance(instance.model_dump(mode='json'), \"TaskQueryParams\", schema, resolver)\n    instance = TaskQueryParams(id=uuid4().hex, historyLength=2, metadata={\"filter\": \"active\"})",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_task_query_params",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_task_query_params(schema, resolver):\n    instance = TaskQueryParams(id=uuid4().hex, metadata={\"filter\": \"active\"})\n    validate_instance(instance.model_dump(mode='json'), \"TaskQueryParams\", schema, resolver)\n    instance = TaskQueryParams(id=uuid4().hex, historyLength=2, metadata={\"filter\": \"active\"})\n    validate_instance(instance.model_dump(mode='json'), \"TaskQueryParams\", schema, resolver)\n    instance_minimal = TaskQueryParams(id=uuid4().hex)\n    validate_instance(instance_minimal.model_dump(mode='json'), \"TaskQueryParams\", schema, resolver)\ndef test_task_id_params(schema, resolver):\n    instance = TaskIdParams(id=uuid4().hex, metadata={\"filter\": \"active\"})\n    validate_instance(instance.model_dump(mode='json'), \"TaskIdParams\", schema, resolver)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_task_id_params",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_task_id_params(schema, resolver):\n    instance = TaskIdParams(id=uuid4().hex, metadata={\"filter\": \"active\"})\n    validate_instance(instance.model_dump(mode='json'), \"TaskIdParams\", schema, resolver)\n    instance_minimal = TaskIdParams(id=uuid4().hex)\n    validate_instance(instance_minimal.model_dump(mode='json'), \"TaskIdParams\", schema, resolver)\ndef test_task_send_params(schema, resolver):\n    msg = Message(role=\"user\", parts=[TextPart(text=\"Start processing\")])\n    pushNotificationConfig = PushNotificationConfig(url=\"http://...\", token=\"tok\")\n    instance = TaskSendParams(\n        id=uuid4().hex,",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_task_send_params",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_task_send_params(schema, resolver):\n    msg = Message(role=\"user\", parts=[TextPart(text=\"Start processing\")])\n    pushNotificationConfig = PushNotificationConfig(url=\"http://...\", token=\"tok\")\n    instance = TaskSendParams(\n        id=uuid4().hex,\n        sessionId=uuid4().hex, # Explicit session ID\n        message=msg,\n        stream=True,\n        pushNotification=pushNotificationConfig,\n        metadata={\"priority\": 1}",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_task_push_notification_config",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_task_push_notification_config(schema, resolver):\n    pushNotificationConfig = PushNotificationConfig(url=\"http://...\", token=\"tok\")\n    instance = TaskPushNotificationConfig(id=uuid4().hex, pushNotificationConfig=pushNotificationConfig)\n    validate_instance(instance.model_dump(mode='json'), \"TaskPushNotificationConfig\", schema, resolver)\n# --- RPC Specific Messages ---\ndef test_jsonrpc_error(schema, resolver):\n    instance = JSONRPCError(code=-32000, message=\"Server error\", data={\"details\": \"trace...\"})\n    validate_instance(instance.model_dump(mode='json'), \"JSONRPCError\", schema, resolver)\n    instance_minimal = JSONRPCError(code=1, message=\"Custom\")\n    validate_instance(instance_minimal.model_dump(mode='json'), \"JSONRPCError\", schema, resolver)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_jsonrpc_error",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_jsonrpc_error(schema, resolver):\n    instance = JSONRPCError(code=-32000, message=\"Server error\", data={\"details\": \"trace...\"})\n    validate_instance(instance.model_dump(mode='json'), \"JSONRPCError\", schema, resolver)\n    instance_minimal = JSONRPCError(code=1, message=\"Custom\")\n    validate_instance(instance_minimal.model_dump(mode='json'), \"JSONRPCError\", schema, resolver)\n# Use parametrize for testing multiple error types cleanly\n@pytest.mark.parametrize(\"error_cls\", [\n    JSONParseError, InvalidRequestError, MethodNotFoundError,\n    InvalidParamsError, InternalError, TaskNotFoundError,\n    TaskNotCancelableError, PushNotificationNotSupportedError,",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_specific_errors",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_specific_errors(error_cls, schema, resolver):\n    instance = error_cls() # Use defaults\n    validate_instance(instance.model_dump(mode='json'), error_cls.__name__, schema, resolver)\n    # Add data if allowed (not const null) and test again\n    if 'data' in error_cls.model_fields and error_cls.model_fields['data'].annotation is not type(None):\n         instance_with_data = error_cls(data={\"info\": \"more\"})\n         validate_instance(instance_with_data.model_dump(mode='json'), error_cls.__name__, schema, resolver)\ndef test_send_task_request(schema, resolver):\n    params = TaskSendParams(id=\"t1\", message=Message(role=\"user\", parts=[TextPart(text=\"go\")]))\n    instance = SendTaskRequest(params=params, id=1) # Use default method and jsonrpc",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_send_task_request",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_send_task_request(schema, resolver):\n    params = TaskSendParams(id=\"t1\", message=Message(role=\"user\", parts=[TextPart(text=\"go\")]))\n    instance = SendTaskRequest(params=params, id=1) # Use default method and jsonrpc\n    dumped_data = instance.model_dump(mode='json')\n    assert dumped_data[\"method\"] == \"tasks/send\"\n    validate_instance(dumped_data, \"SendTaskRequest\", schema, resolver)\ndef test_send_task_response(schema, resolver):\n    # Result case 1: Task\n    task_result = Task(id=\"t1\", status=TaskStatus(state=TaskState.SUBMITTED))\n    instance_task = SendTaskResponse(id=1, result=task_result)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_send_task_response",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_send_task_response(schema, resolver):\n    # Result case 1: Task\n    task_result = Task(id=\"t1\", status=TaskStatus(state=TaskState.SUBMITTED))\n    instance_task = SendTaskResponse(id=1, result=task_result)\n    validate_instance(instance_task.model_dump(mode='json'), \"SendTaskResponse\", schema, resolver)\n    # Result case 2: TaskStatusUpdateEvent\n    update_result = TaskStatusUpdateEvent(id=\"t1\", status=TaskStatus(state=TaskState.WORKING))\n    instance_update = SendTaskStreamingResponse(id=1, result=update_result)\n    validate_instance(instance_update.model_dump(mode='json'), \"SendTaskStreamingResponse\", schema, resolver)\n    # Error case",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_get_task_request",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_get_task_request(schema, resolver):\n    params = TaskQueryParams(id=\"t1\")\n    instance = GetTaskRequest(params=params, id=2)\n    dumped_data = instance.model_dump(mode='json')\n    assert dumped_data[\"method\"] == \"tasks/get\"\n    validate_instance(dumped_data, \"GetTaskRequest\", schema, resolver)\ndef test_get_task_response(schema, resolver):\n    task_result = Task(id=\"t1\", status=TaskStatus(state=TaskState.COMPLETED))\n    instance = GetTaskResponse(id=2, result=task_result)\n    validate_instance(instance.model_dump(mode='json'), \"GetTaskResponse\", schema, resolver)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_get_task_response",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_get_task_response(schema, resolver):\n    task_result = Task(id=\"t1\", status=TaskStatus(state=TaskState.COMPLETED))\n    instance = GetTaskResponse(id=2, result=task_result)\n    validate_instance(instance.model_dump(mode='json'), \"GetTaskResponse\", schema, resolver)\n    error = TaskNotFoundError()\n    instance_error = GetTaskResponse(id=2, error=error)\n    validate_instance(instance_error.model_dump(mode='json'), \"GetTaskResponse\", schema, resolver)\ndef test_cancel_task_request(schema, resolver):\n    params = TaskIdParams(id=\"t1\")\n    instance = CancelTaskRequest(params=params, id=3)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_cancel_task_request",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_cancel_task_request(schema, resolver):\n    params = TaskIdParams(id=\"t1\")\n    instance = CancelTaskRequest(params=params, id=3)\n    dumped_data = instance.model_dump(mode='json')\n    assert dumped_data[\"method\"] == \"tasks/cancel\"\n    validate_instance(dumped_data, \"CancelTaskRequest\", schema, resolver)\ndef test_cancel_task_response(schema, resolver):\n    task_result = Task(id=\"t1\", status=TaskStatus(state=TaskState.CANCELED))\n    instance = CancelTaskResponse(id=3, result=task_result)\n    validate_instance(instance.model_dump(mode='json'), \"CancelTaskResponse\", schema, resolver)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_cancel_task_response",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_cancel_task_response(schema, resolver):\n    task_result = Task(id=\"t1\", status=TaskStatus(state=TaskState.CANCELED))\n    instance = CancelTaskResponse(id=3, result=task_result)\n    validate_instance(instance.model_dump(mode='json'), \"CancelTaskResponse\", schema, resolver)\n    error = TaskNotCancelableError()\n    instance_error = CancelTaskResponse(id=3, error=error)\n    validate_instance(instance_error.model_dump(mode='json'), \"CancelTaskResponse\", schema, resolver)\ndef test_set_task_push_notification_request(schema, resolver):\n    params = TaskPushNotificationConfig(id=\"t1\", pushNotificationConfig=PushNotificationConfig(url=\"http://...\", token=\"t\"))\n    instance = SetTaskPushNotificationRequest(params=params, id=5)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_set_task_push_notification_request",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_set_task_push_notification_request(schema, resolver):\n    params = TaskPushNotificationConfig(id=\"t1\", pushNotificationConfig=PushNotificationConfig(url=\"http://...\", token=\"t\"))\n    instance = SetTaskPushNotificationRequest(params=params, id=5)\n    dumped_data = instance.model_dump(mode='json')\n    assert dumped_data[\"method\"] == \"tasks/pushNotification/set\"\n    validate_instance(dumped_data, \"SetTaskPushNotificationRequest\", schema, resolver)\ndef test_set_task_push_notification_response(schema, resolver):\n    cb_info = TaskPushNotificationConfig(id=\"t1\", pushNotificationConfig=PushNotificationConfig(url=\"http://...\", token=\"t\"))\n    instance = SetTaskPushNotificationResponse(id=5, result=cb_info)\n    validate_instance(instance.model_dump(mode='json'), \"SetTaskPushNotificationResponse\", schema, resolver)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_set_task_push_notification_response",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_set_task_push_notification_response(schema, resolver):\n    cb_info = TaskPushNotificationConfig(id=\"t1\", pushNotificationConfig=PushNotificationConfig(url=\"http://...\", token=\"t\"))\n    instance = SetTaskPushNotificationResponse(id=5, result=cb_info)\n    validate_instance(instance.model_dump(mode='json'), \"SetTaskPushNotificationResponse\", schema, resolver)\n    error = PushNotificationNotSupportedError()\n    instance_error = SetTaskPushNotificationResponse(id=5, error=error)\n    validate_instance(instance_error.model_dump(mode='json'), \"SetTaskPushNotificationResponse\", schema, resolver)\ndef test_get_task_push_notification_request(schema, resolver):\n    params = TaskIdParams(id=\"t1\")\n    instance = GetTaskPushNotificationRequest(params=params, id=6)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_get_task_push_notification_request",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_get_task_push_notification_request(schema, resolver):\n    params = TaskIdParams(id=\"t1\")\n    instance = GetTaskPushNotificationRequest(params=params, id=6)\n    dumped_data = instance.model_dump(mode='json')\n    assert dumped_data[\"method\"] == \"tasks/pushNotification/get\"\n    validate_instance(dumped_data, \"GetTaskPushNotificationRequest\", schema, resolver)\ndef test_get_task_push_notification_response(schema, resolver):\n    cb_info = TaskPushNotificationConfig(id=\"t1\", pushNotificationConfig=PushNotificationConfig(url=\"http://...\", token=\"t\"))\n    instance = GetTaskPushNotificationResponse(id=6, result=cb_info)\n    validate_instance(instance.model_dump(mode='json'), \"GetTaskPushNotificationResponse\", schema, resolver)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_get_task_push_notification_response",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_get_task_push_notification_response(schema, resolver):\n    cb_info = TaskPushNotificationConfig(id=\"t1\", pushNotificationConfig=PushNotificationConfig(url=\"http://...\", token=\"t\"))\n    instance = GetTaskPushNotificationResponse(id=6, result=cb_info)\n    validate_instance(instance.model_dump(mode='json'), \"GetTaskPushNotificationResponse\", schema, resolver)\n    # Case where push notifications might not be set (result=null)\n    instance_null = GetTaskPushNotificationResponse(id=6, result=None)\n    validate_instance(instance_null.model_dump(mode='json'), \"GetTaskPushNotificationResponse\", schema, resolver)\n    error = TaskNotFoundError()\n    instance_error = GetTaskPushNotificationResponse(id=6, error=error)\n    validate_instance(instance_error.model_dump(mode='json'), \"GetTaskPushNotificationResponse\", schema, resolver)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_task_subscription_request",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_task_subscription_request(schema, resolver):\n    params = TaskIdParams(id=\"t1\")\n    instance = TaskResubscriptionRequest(params=params, id=7)\n    dumped_data = instance.model_dump(mode='json')\n    assert dumped_data[\"method\"] == \"tasks/resubscribe\"\n    validate_instance(dumped_data, \"TaskResubscriptionRequest\", schema, resolver)\n# --- A2ARequest Union ---\n# Use parametrize for testing multiple request types against the union schema\n@pytest.mark.parametrize(\"request_instance\", [\n    SendTaskRequest(params=TaskSendParams(id=\"t1\", message=Message(role=\"user\", parts=[TextPart(text=\"go\")]))),",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_a2a_request_union",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_a2a_request_union(request_instance, schema, resolver):\n    # The A2ARequest definition itself uses oneOf and discriminator\n    a2a_schema_ref = {\"$ref\": \"#/$defs/A2ARequest\"}\n    instance_data = A2ARequest.dump_python(request_instance, mode='json')\n    try:\n        # Validate directly against the A2ARequest definition reference\n        validate(instance=instance_data, schema=a2a_schema_ref, resolver=resolver, format_checker=Draft7Validator.FORMAT_CHECKER)\n    except ValidationError as e:\n        pytest.fail(f\"Validation failed for A2ARequest ({request_instance.method}) with data:\\n{json.dumps(instance_data, indent=2)}\\nSchema Path: {e.schema_path}\\nInstance Path: {e.path}\\nValidator: {e.validator} = {e.validator_value}\\nError: {e.message}\")\n    except Exception as e:",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_agent_provider",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_agent_provider(schema, resolver):\n    instance = AgentProvider(organization=\"TestOrg\", url=\"https://test.org\")\n    validate_instance(instance.model_dump(mode='json'), \"AgentProvider\", schema, resolver)\n    instance_min = AgentProvider(organization=\"MinOrg\")\n    validate_instance(instance_min.model_dump(mode='json'), \"AgentProvider\", schema, resolver)\ndef test_agent_capabilities(schema, resolver):\n    instance = AgentCapabilities(streaming=True, pushNotifications=False, stateTransitionHistory=True)\n    validate_instance(instance.model_dump(mode='json'), \"AgentCapabilities\", schema, resolver)\n    instance_default = AgentCapabilities()\n    validate_instance(instance_default.model_dump(mode='json'), \"AgentCapabilities\", schema, resolver)",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_agent_capabilities",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_agent_capabilities(schema, resolver):\n    instance = AgentCapabilities(streaming=True, pushNotifications=False, stateTransitionHistory=True)\n    validate_instance(instance.model_dump(mode='json'), \"AgentCapabilities\", schema, resolver)\n    instance_default = AgentCapabilities()\n    validate_instance(instance_default.model_dump(mode='json'), \"AgentCapabilities\", schema, resolver)\ndef test_agent_authentication(schema, resolver):\n    instance = AgentAuthentication(schemes=[\"api_key\"], credentials=None)\n    validate_instance(instance.model_dump(mode='json'), \"AgentAuthentication\", schema, resolver)\ndef test_agent_skill(schema, resolver):\n    instance = AgentSkill(",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_agent_authentication",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_agent_authentication(schema, resolver):\n    instance = AgentAuthentication(schemes=[\"api_key\"], credentials=None)\n    validate_instance(instance.model_dump(mode='json'), \"AgentAuthentication\", schema, resolver)\ndef test_agent_skill(schema, resolver):\n    instance = AgentSkill(\n        id=\"summarize\",\n        name=\"Text Summarization\",\n        description=\"Summarizes long text\",\n        tags=[\"nlp\", \"text\"],\n        examples=[\"Summarize this document...\", \"Give me the key points of:\"],",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_agent_skill",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_agent_skill(schema, resolver):\n    instance = AgentSkill(\n        id=\"summarize\",\n        name=\"Text Summarization\",\n        description=\"Summarizes long text\",\n        tags=[\"nlp\", \"text\"],\n        examples=[\"Summarize this document...\", \"Give me the key points of:\"],\n        inputModes=[\"text\", \"file\"],\n        outputModes=[\"text\"]\n    )",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "test_agent_card",
        "kind": 2,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "def test_agent_card(schema, resolver):\n    provider = AgentProvider(organization=\"AI Inc.\")\n    caps = AgentCapabilities(streaming=True)\n    auth = AgentAuthentication(schemes=[\"bearer\"])\n    skill = AgentSkill(id=\"translate\", name=\"Translation\")\n    instance = AgentCard(\n        name=\"Multilingual Agent\",\n        description=\"Translates text between languages.\",\n        url=\"https://agent.example.com\",\n        provider=provider,",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "SCHEMA_FILE",
        "kind": 5,
        "importPath": "tests.test_a2a_spec",
        "description": "tests.test_a2a_spec",
        "peekOfCode": "SCHEMA_FILE = Path(__file__).parent.parent / \"specification/json/a2a.json\"\n@pytest.fixture(scope=\"module\")\ndef schema():\n    \"\"\"Provides the loaded JSON schema from schema.json.\"\"\"\n    if not SCHEMA_FILE.is_file():\n        pytest.fail(f\"Schema file not found at {SCHEMA_FILE.resolve()}\")\n    try:\n        with open(SCHEMA_FILE, 'r', encoding='utf-8') as f:\n            return json.load(f)\n    except json.JSONDecodeError as e:",
        "detail": "tests.test_a2a_spec",
        "documentation": {}
    },
    {
        "label": "mock_env_vars",
        "kind": 2,
        "importPath": "tests.test_crewai_image_agent",
        "description": "tests.test_crewai_image_agent",
        "peekOfCode": "def mock_env_vars(mocker):\n  \"\"\"Mocks environment variables.\"\"\"\n  mocker.patch.dict(os.environ, {\"GOOGLE_API_KEY\": \"test_api_key\"})\n@pytest.fixture\ndef mock_genai_client(mocker):\n  \"\"\"Mocks the google.genai client and its methods.\"\"\"\n  mock_client_instance = MagicMock()\n  mock_models = MagicMock()\n  mock_response = MagicMock()\n  mock_candidate = MagicMock()",
        "detail": "tests.test_crewai_image_agent",
        "documentation": {}
    },
    {
        "label": "mock_genai_client",
        "kind": 2,
        "importPath": "tests.test_crewai_image_agent",
        "description": "tests.test_crewai_image_agent",
        "peekOfCode": "def mock_genai_client(mocker):\n  \"\"\"Mocks the google.genai client and its methods.\"\"\"\n  mock_client_instance = MagicMock()\n  mock_models = MagicMock()\n  mock_response = MagicMock()\n  mock_candidate = MagicMock()\n  mock_content = MagicMock()\n  mock_part_text = MagicMock()\n  mock_part_text.text = \"Generated text description.\"\n  mock_part_text.inline_data = None",
        "detail": "tests.test_crewai_image_agent",
        "documentation": {}
    },
    {
        "label": "mock_cache",
        "kind": 2,
        "importPath": "tests.test_crewai_image_agent",
        "description": "tests.test_crewai_image_agent",
        "peekOfCode": "def mock_cache(mocker):\n  \"\"\"Mocks the InMemoryCache.\"\"\"\n  mock_cache_instance = MagicMock(spec=InMemoryCache)\n  cache_storage = {}\n  def mock_get(key, default=None):\n    return cache_storage.get(key, default)\n  def mock_set(key, value):\n    cache_storage[key] = value\n  mock_cache_instance.get.side_effect = mock_get\n  mock_cache_instance.set.side_effect = mock_set",
        "detail": "tests.test_crewai_image_agent",
        "documentation": {}
    },
    {
        "label": "mock_pil_image",
        "kind": 2,
        "importPath": "tests.test_crewai_image_agent",
        "description": "tests.test_crewai_image_agent",
        "peekOfCode": "def mock_pil_image(mocker):\n  \"\"\"Mocks PIL Image operations.\"\"\"\n  mock_image_instance = MagicMock(spec=Image.Image)\n  mock_image_open = mocker.patch(\"agents.crewai.agent.Image.open\")\n  mock_image_open.return_value = mock_image_instance\n  return {\"open\": mock_image_open, \"instance\": mock_image_instance}\n@pytest.fixture\ndef image_agent_instance(mocker, mock_env_vars):\n  \"\"\"Provides a mocked instance of ImageGenerationAgent.\"\"\"\n  mocker.patch(\"agents.crewai.agent.LLM\")",
        "detail": "tests.test_crewai_image_agent",
        "documentation": {}
    },
    {
        "label": "image_agent_instance",
        "kind": 2,
        "importPath": "tests.test_crewai_image_agent",
        "description": "tests.test_crewai_image_agent",
        "peekOfCode": "def image_agent_instance(mocker, mock_env_vars):\n  \"\"\"Provides a mocked instance of ImageGenerationAgent.\"\"\"\n  mocker.patch(\"agents.crewai.agent.LLM\")\n  mocker.patch(\"agents.crewai.agent.Agent\")\n  mocker.patch(\"agents.crewai.agent.Task\")\n  mock_crew = mocker.patch(\"agents.crewai.agent.Crew\")\n  mock_crew_instance = MagicMock()\n  mock_crew.return_value = mock_crew_instance\n  agent = ImageGenerationAgent()\n  agent.mock_crew_instance = mock_crew_instance",
        "detail": "tests.test_crewai_image_agent",
        "documentation": {}
    },
    {
        "label": "test_get_api_key",
        "kind": 2,
        "importPath": "tests.test_crewai_image_agent",
        "description": "tests.test_crewai_image_agent",
        "peekOfCode": "def test_get_api_key(mocker):\n  \"\"\"Tests if get_api_key reads the correct environment variable.\"\"\"\n  mock_loader = mocker.patch(\"agents.crewai.agent.load_dotenv\")\n  api_key = get_api_key()\n  assert api_key == \"test_api_key\"\n  mock_loader.assert_called_once()\ndef test_generate_image_tool_success_new_image(\n    mocker, mock_genai_client, mock_cache\n):\n  \"\"\"Tests the tool generating a new image successfully.\"\"\"",
        "detail": "tests.test_crewai_image_agent",
        "documentation": {}
    },
    {
        "label": "test_generate_image_tool_success_new_image",
        "kind": 2,
        "importPath": "tests.test_crewai_image_agent",
        "description": "tests.test_crewai_image_agent",
        "peekOfCode": "def test_generate_image_tool_success_new_image(\n    mocker, mock_genai_client, mock_cache\n):\n  \"\"\"Tests the tool generating a new image successfully.\"\"\"\n  mock_uuid = mocker.patch(\"agents.crewai.agent.uuid4\")\n  test_uuid = UUID(\"12345678123456781234567812345678\")\n  mock_uuid.return_value = test_uuid\n  session_id = \"session_123\"\n  prompt = \"Generate a cat.\"\n  mock_cache[\"storage\"].clear()",
        "detail": "tests.test_crewai_image_agent",
        "documentation": {}
    },
    {
        "label": "test_generate_image_tool_success_with_ref_image",
        "kind": 2,
        "importPath": "tests.test_crewai_image_agent",
        "description": "tests.test_crewai_image_agent",
        "peekOfCode": "def test_generate_image_tool_success_with_ref_image(\n    mocker, mock_genai_client, mock_cache, mock_pil_image\n):\n  \"\"\"Tests the tool using a reference image from cache.\"\"\"\n  mock_uuid = mocker.patch(\"agents.crewai.agent.uuid4\")\n  test_uuid_new = UUID(\"abcdefabcdefabcdefabcdefabcdefab\")\n  mock_uuid.return_value = test_uuid_new\n  session_id = \"session_abc\"\n  prompt = \"Make the dog blue.\"\n  ref_image_id = \"ref_img_001\"",
        "detail": "tests.test_crewai_image_agent",
        "documentation": {}
    },
    {
        "label": "test_generate_image_tool_empty_prompt",
        "kind": 2,
        "importPath": "tests.test_crewai_image_agent",
        "description": "tests.test_crewai_image_agent",
        "peekOfCode": "def test_generate_image_tool_empty_prompt(mocker):\n  \"\"\"Tests that an empty prompt raises ValueError.\"\"\"\n  with pytest.raises(ValueError, match=\"Prompt cannot be empty\"):\n    generate_image_tool.func(\"\", \"session_empty\")\ndef test_image_generation_agent_init(mocker):\n  \"\"\"Tests the agent's constructor.\"\"\"\n  mock_llm_class = mocker.patch(\"agents.crewai.agent.LLM\")\n  mock_agent_class = mocker.patch(\"agents.crewai.agent.Agent\")\n  mock_task_class = mocker.patch(\"agents.crewai.agent.Task\")\n  mock_crew_class = mocker.patch(\"agents.crewai.agent.Crew\")",
        "detail": "tests.test_crewai_image_agent",
        "documentation": {}
    },
    {
        "label": "test_image_generation_agent_init",
        "kind": 2,
        "importPath": "tests.test_crewai_image_agent",
        "description": "tests.test_crewai_image_agent",
        "peekOfCode": "def test_image_generation_agent_init(mocker):\n  \"\"\"Tests the agent's constructor.\"\"\"\n  mock_llm_class = mocker.patch(\"agents.crewai.agent.LLM\")\n  mock_agent_class = mocker.patch(\"agents.crewai.agent.Agent\")\n  mock_task_class = mocker.patch(\"agents.crewai.agent.Task\")\n  mock_crew_class = mocker.patch(\"agents.crewai.agent.Crew\")\n  mocker.patch(\n      \"agents.crewai.agent.get_api_key\", return_value=\"fake_key_for_init\"\n  )\n  agent = ImageGenerationAgent()",
        "detail": "tests.test_crewai_image_agent",
        "documentation": {}
    },
    {
        "label": "test_image_generation_agent_invoke",
        "kind": 2,
        "importPath": "tests.test_crewai_image_agent",
        "description": "tests.test_crewai_image_agent",
        "peekOfCode": "def test_image_generation_agent_invoke(image_agent_instance):\n  \"\"\"Tests the invoke method.\"\"\"\n  mock_crew_instance = image_agent_instance.mock_crew_instance\n  mock_crew_instance.kickoff.return_value = \"mock_final_image_id\"\n  query = \"Create a picture of a sunset.\"\n  session_id = \"session_invoke_1\"\n  result = image_agent_instance.invoke(query, session_id)\n  assert result == \"mock_final_image_id\"\n  expected_inputs = {\"user_prompt\": query, \"session_id\": session_id, \"artifact_file_id\": None}\n  mock_crew_instance.kickoff.assert_called_once_with(expected_inputs)",
        "detail": "tests.test_crewai_image_agent",
        "documentation": {}
    },
    {
        "label": "test_image_generation_agent_get_image_data_found",
        "kind": 2,
        "importPath": "tests.test_crewai_image_agent",
        "description": "tests.test_crewai_image_agent",
        "peekOfCode": "def test_image_generation_agent_get_image_data_found(\n    image_agent_instance, mock_cache\n):\n  \"\"\"Tests get_image_data when the image is found in the cache.\"\"\"\n  session_id = \"session_get_1\"\n  image_key = \"img_key_found\"\n  expected_data = Imagedata(\n      id=image_key, name=\"found.png\", mimeType=\"image/png\", bytes=\"Zm91bmQ=\"\n  )\n  mock_cache[\"storage\"][session_id] = {image_key: expected_data}",
        "detail": "tests.test_crewai_image_agent",
        "documentation": {}
    },
    {
        "label": "test_image_generation_agent_get_image_data_not_found_key_missing",
        "kind": 2,
        "importPath": "tests.test_crewai_image_agent",
        "description": "tests.test_crewai_image_agent",
        "peekOfCode": "def test_image_generation_agent_get_image_data_not_found_key_missing(\n    image_agent_instance, mock_cache\n):\n  \"\"\"Tests get_image_data when the session exists but the key is missing.\"\"\"\n  session_id = \"session_get_2\"\n  image_key = \"img_key_missing\"\n  mock_cache[\"storage\"][session_id] = {\"other_key\": Imagedata(id=\"other\")}\n  result = image_agent_instance.get_image_data(session_id, image_key)\n  assert isinstance(result, Imagedata)\n  assert result.id is None",
        "detail": "tests.test_crewai_image_agent",
        "documentation": {}
    },
    {
        "label": "cache_instance",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def cache_instance():\n    \"\"\"\n    Provides a clean InMemoryCache instance for each test function.\n    Ensures tests don't interfere with each other's cache state.\n    \"\"\"\n    # Get the singleton instance\n    instance = InMemoryCache()\n    # Clear any state from previous tests\n    instance.clear()\n    yield instance",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    },
    {
        "label": "test_singleton_instance",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def test_singleton_instance(cache_instance):\n    \"\"\"Verify that multiple calls to the constructor return the same instance.\"\"\"\n    instance1 = cache_instance\n    instance2 = InMemoryCache()\n    assert instance1 is instance2\n    assert id(instance1) == id(instance2)\ndef test_set_and_get_basic(cache_instance):\n    \"\"\"Test setting and retrieving a simple value.\"\"\"\n    cache_instance.set(\"key1\", \"value1\")\n    assert cache_instance.get(\"key1\") == \"value1\"",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    },
    {
        "label": "test_set_and_get_basic",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def test_set_and_get_basic(cache_instance):\n    \"\"\"Test setting and retrieving a simple value.\"\"\"\n    cache_instance.set(\"key1\", \"value1\")\n    assert cache_instance.get(\"key1\") == \"value1\"\ndef test_get_non_existent_key(cache_instance):\n    \"\"\"Test retrieving a key that doesn't exist, expecting the default.\"\"\"\n    assert cache_instance.get(\"non_existent\") is None\n    assert cache_instance.get(\"non_existent\", default=\"default_value\") == \"default_value\"\ndef test_set_overwrite(cache_instance):\n    \"\"\"Test overwriting an existing key.\"\"\"",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    },
    {
        "label": "test_get_non_existent_key",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def test_get_non_existent_key(cache_instance):\n    \"\"\"Test retrieving a key that doesn't exist, expecting the default.\"\"\"\n    assert cache_instance.get(\"non_existent\") is None\n    assert cache_instance.get(\"non_existent\", default=\"default_value\") == \"default_value\"\ndef test_set_overwrite(cache_instance):\n    \"\"\"Test overwriting an existing key.\"\"\"\n    cache_instance.set(\"key1\", \"value1\")\n    assert cache_instance.get(\"key1\") == \"value1\"\n    cache_instance.set(\"key1\", \"value2\")\n    assert cache_instance.get(\"key1\") == \"value2\"",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    },
    {
        "label": "test_set_overwrite",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def test_set_overwrite(cache_instance):\n    \"\"\"Test overwriting an existing key.\"\"\"\n    cache_instance.set(\"key1\", \"value1\")\n    assert cache_instance.get(\"key1\") == \"value1\"\n    cache_instance.set(\"key1\", \"value2\")\n    assert cache_instance.get(\"key1\") == \"value2\"\ndef test_delete_key(cache_instance):\n    \"\"\"Test deleting a key.\"\"\"\n    cache_instance.set(\"key_to_delete\", \"some_value\")\n    assert cache_instance.get(\"key_to_delete\") == \"some_value\"",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    },
    {
        "label": "test_delete_key",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def test_delete_key(cache_instance):\n    \"\"\"Test deleting a key.\"\"\"\n    cache_instance.set(\"key_to_delete\", \"some_value\")\n    assert cache_instance.get(\"key_to_delete\") == \"some_value\"\n    deleted = cache_instance.delete(\"key_to_delete\")\n    assert deleted is True\n    assert cache_instance.get(\"key_to_delete\") is None\ndef test_delete_non_existent_key(cache_instance):\n    \"\"\"Test deleting a key that doesn't exist.\"\"\"\n    deleted = cache_instance.delete(\"non_existent_to_delete\")",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    },
    {
        "label": "test_delete_non_existent_key",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def test_delete_non_existent_key(cache_instance):\n    \"\"\"Test deleting a key that doesn't exist.\"\"\"\n    deleted = cache_instance.delete(\"non_existent_to_delete\")\n    assert deleted is False\ndef test_clear_cache(cache_instance):\n    \"\"\"Test clearing the entire cache.\"\"\"\n    cache_instance.set(\"key1\", \"value1\")\n    cache_instance.set(\"key2\", 123, ttl=10)\n    assert cache_instance.get(\"key1\") == \"value1\"\n    assert cache_instance.get(\"key2\") == 123",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    },
    {
        "label": "test_clear_cache",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def test_clear_cache(cache_instance):\n    \"\"\"Test clearing the entire cache.\"\"\"\n    cache_instance.set(\"key1\", \"value1\")\n    cache_instance.set(\"key2\", 123, ttl=10)\n    assert cache_instance.get(\"key1\") == \"value1\"\n    assert cache_instance.get(\"key2\") == 123\n    cleared = cache_instance.clear()\n    assert cleared is True\n    assert cache_instance.get(\"key1\") is None\n    assert cache_instance.get(\"key2\") is None",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    },
    {
        "label": "test_ttl_expiration",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def test_ttl_expiration(cache_instance):\n    \"\"\"Test that a key expires after its TTL.\"\"\"\n    key = \"ttl_key\"\n    value = \"expires\"\n    ttl_seconds = 0.1  # Use a short TTL for testing\n    cache_instance.set(key, value, ttl=ttl_seconds)\n    assert cache_instance.get(key) == value  # Should exist immediately\n    time.sleep(ttl_seconds + 0.05)  # Wait slightly longer than TTL\n    assert cache_instance.get(key) is None  # Should have expired\ndef test_ttl_does_not_expire_early(cache_instance):",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    },
    {
        "label": "test_ttl_does_not_expire_early",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def test_ttl_does_not_expire_early(cache_instance):\n    \"\"\"Test that a key does not expire before its TTL.\"\"\"\n    key = \"long_ttl_key\"\n    value = \"persistent\"\n    ttl_seconds = 1\n    cache_instance.set(key, value, ttl=ttl_seconds)\n    time.sleep(0.1)  # Wait less than TTL\n    assert cache_instance.get(key) == value # Should still exist\ndef test_ttl_set_no_ttl_removes_ttl(cache_instance):\n    \"\"\"Test that setting a key without TTL removes any existing TTL.\"\"\"",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    },
    {
        "label": "test_ttl_set_no_ttl_removes_ttl",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def test_ttl_set_no_ttl_removes_ttl(cache_instance):\n    \"\"\"Test that setting a key without TTL removes any existing TTL.\"\"\"\n    key = \"ttl_override_key\"\n    value1 = \"expiring_soon\"\n    value2 = \"permanent\"\n    ttl_seconds = 0.1\n    cache_instance.set(key, value1, ttl=ttl_seconds)\n    assert cache_instance.get(key) == value1\n    # Overwrite without TTL\n    cache_instance.set(key, value2)",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    },
    {
        "label": "test_ttl_set_with_ttl_overwrites_no_ttl",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def test_ttl_set_with_ttl_overwrites_no_ttl(cache_instance):\n    \"\"\"Test that setting a key with TTL overwrites a previous non-TTL entry.\"\"\"\n    key = \"add_ttl_key\"\n    value1 = \"permanent\"\n    value2 = \"expiring\"\n    ttl_seconds = 0.1\n    cache_instance.set(key, value1) # No TTL initially\n    assert cache_instance.get(key) == value1\n    # Overwrite with TTL\n    cache_instance.set(key, value2, ttl=ttl_seconds)",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    },
    {
        "label": "test_different_data_types",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def test_different_data_types(cache_instance):\n    \"\"\"Test storing various data types.\"\"\"\n    cache_instance.set(\"string_key\", \"hello\")\n    cache_instance.set(\"int_key\", 123)\n    cache_instance.set(\"float_key\", 45.67)\n    cache_instance.set(\"bool_key\", True)\n    cache_instance.set(\"list_key\", [1, 2, 3])\n    cache_instance.set(\"dict_key\", {\"a\": 1, \"b\": 2})\n    cache_instance.set(\"none_key\", None)\n    assert cache_instance.get(\"string_key\") == \"hello\"",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    },
    {
        "label": "test_singleton_in_threads",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def test_singleton_in_threads():\n    \"\"\"Verify singleton pattern holds when accessed from multiple threads.\"\"\"\n    instances: List[InMemoryCache] = []\n    num_threads = 5\n    def get_instance():\n        instance = InMemoryCache()\n        instances.append(instance)\n    threads = [threading.Thread(target=get_instance) for _ in range(num_threads)]\n    for t in threads:\n        t.start()",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    },
    {
        "label": "test_concurrent_set_get_different_keys",
        "kind": 2,
        "importPath": "tests.test_in_memory_cache",
        "description": "tests.test_in_memory_cache",
        "peekOfCode": "def test_concurrent_set_get_different_keys(cache_instance):\n    \"\"\"\n    Test basic thread safety: multiple threads setting/getting *different* keys.\n    This tests the data lock mechanism under concurrent access.\n    \"\"\"\n    num_threads = 10\n    keys_values = {f\"thread_key_{i}\": f\"value_{i}\" for i in range(num_threads)}\n    def worker(key, value):\n        cache_instance.set(key, value)\n        retrieved = cache_instance.get(key)",
        "detail": "tests.test_in_memory_cache",
        "documentation": {}
    }
]